{"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { useAccount } from 'wagmi';\nimport { routes, useContext } from '../ConnectKit';\nimport Modal from '../Common/Modal';\nimport Onboarding from '../Pages/Onboarding';\nimport About from '../Pages/About';\nimport Connectors from '../Pages/Connectors';\nimport ConnectUsing from './ConnectUsing';\nimport DownloadApp from '../Pages/DownloadApp';\nimport Profile from '../Pages/Profile';\nimport SwitchNetworks from '../Pages/SwitchNetworks';\nimport MobileConnectors from '../Pages/MobileConnectors';\nimport SignInWithEthereum from '../Pages/SignInWithEthereum';\nimport { ConnectKitButton } from '../ConnectButton';\nimport { getAppName } from '../../defaultConfig';\nimport { ConnectKitThemeProvider } from '../ConnectKitThemeProvider/ConnectKitThemeProvider';\nimport styled from './../../styles/styled';\nimport { keyframes } from 'styled-components';\nimport { Web3ContextProvider } from '../contexts/web3';\nimport { useChainIsSupported } from '../../hooks/useChainIsSupported';\nconst dist = 8;\nconst shake = keyframes `\r\n  0%{ transform:none; }\r\n  25%{ transform:translateX(${dist}px); }\r\n  50%{ transform:translateX(-${dist}px); }\r\n  75%{ transform:translateX(${dist}px); }\r\n  100%{ transform:none; }\r\n`;\nconst cursorIn = keyframes `\r\n  0%{ transform:translate(500%,100%); opacity:0; }\r\n  60%{ transform:translate(25%,-20%); opacity:1; }\r\n  70%{ transform:translate(25%,-20%); }\r\n  85%{ transform:translate(25%,-20%) scale(0.9); }\r\n  100%{ transform:translate(25%,-20%) scale(1); opacity:1; }\r\n`;\nconst Cursor = styled.div.withConfig({ displayName: \"Cursor\", componentId: \"-13tox8y\" }) `\r\n  z-index: 2;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.4), 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  opacity: 0;\r\n  &.play {\r\n    animation: ${cursorIn} 1300ms 200ms cubic-bezier(0.16, 1, 0.6, 1) both;\r\n  }\r\n`;\nconst Container = styled.div.withConfig({ displayName: \"Container\", componentId: \"-1iqfc4e\" }) `\r\n  z-index: 1;\r\n  position: absolute;\r\n  inset: 0;\r\n  &.shake {\r\n    animation: ${shake} 300ms 100ms cubic-bezier(0.16, 1, 0.6, 1) both;\r\n  }\r\n`;\nconst ButtonContainer = styled.div.withConfig({ displayName: \"ButtonContainer\", componentId: \"-1j0an4k\" }) `\r\n  z-index: 1;\r\n  position: absolute;\r\n  inset: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  &:before {\r\n    z-index: 9;\r\n    content: '';\r\n    position: absolute;\r\n    inset: 0;\r\n  }\r\n`;\nconst customThemeDefault = {};\nconst ConnectModal = ({ theme = 'auto', customTheme = customThemeDefault, lang = 'en-US', mode = 'auto', inline = false, open, onClose, }) => {\n    var _a;\n    const context = useContext();\n    const { isConnected, chain } = useAccount();\n    const chainIsSupported = useChainIsSupported(chain === null || chain === void 0 ? void 0 : chain.id);\n    //if chain is unsupported we enforce a \"switch chain\" prompt\n    const closeable = !(((_a = context.options) === null || _a === void 0 ? void 0 : _a.enforceSupportedChains) &&\n        isConnected &&\n        !chainIsSupported);\n    const showBackButton = closeable &&\n        context.route !== routes.CONNECTORS &&\n        context.route !== routes.PROFILE;\n    const showInfoButton = closeable && context.route !== routes.PROFILE;\n    const onBack = () => {\n        if (context.route === routes.SIGNINWITHETHEREUM) {\n            context.setRoute(routes.PROFILE);\n        }\n        else if (context.route === routes.SWITCHNETWORKS) {\n            context.setRoute(routes.PROFILE);\n        }\n        else if (context.route === routes.DOWNLOAD) {\n            context.setRoute(routes.CONNECT);\n        }\n        else {\n            context.setRoute(routes.CONNECTORS);\n        }\n    };\n    const pages = {\n        onboarding: _jsx(Onboarding, {}),\n        about: _jsx(About, {}),\n        download: _jsx(DownloadApp, {}),\n        connectors: _jsx(Connectors, {}),\n        mobileConnectors: _jsx(MobileConnectors, {}),\n        connect: _jsx(ConnectUsing, {}),\n        profile: _jsx(Profile, { closeModal: () => setIsOpen(false) }),\n        switchNetworks: _jsx(SwitchNetworks, {}),\n        signInWithEthereum: _jsx(SignInWithEthereum, {}),\n    };\n    const ref = useRef(null);\n    const cursorRef = useRef(null);\n    const [isOpen, setIsOpen] = useState(open !== null && open !== void 0 ? open : false);\n    useEffect(() => {\n        if (open)\n            context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);\n        setIsOpen(open !== null && open !== void 0 ? open : false);\n    }, [open]);\n    useEffect(() => {\n        if (isOpen)\n            context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);\n    }, [isOpen]);\n    useEffect(() => {\n        if (!isOpen && inline) {\n            if (onClose) {\n                if (cursorRef.current) {\n                    cursorRef.current.classList.remove('play');\n                    void cursorRef.current.offsetWidth;\n                    cursorRef.current.classList.add('play');\n                }\n                setTimeout(() => {\n                    setIsOpen(true);\n                }, 1500);\n            }\n            else {\n                setTimeout(() => {\n                    setIsOpen(true);\n                }, 500);\n            }\n        }\n    }, [isOpen]);\n    //useEffect(() => setIsOpen(false), [isConnected]);\n    const onModalClose = () => {\n        if (onClose) {\n            setIsOpen(false);\n            onClose();\n        }\n        else {\n            if (ref.current) {\n                // reset animation\n                ref.current.classList.remove('shake');\n                void ref.current.offsetWidth;\n                ref.current.classList.add('shake');\n            }\n        }\n    };\n    useEffect(() => {\n        var _a;\n        if (isConnected) {\n            if (context.route !== routes.PROFILE ||\n                context.route !== routes.SIGNINWITHETHEREUM) {\n                if (context.signInWithEthereum &&\n                    !((_a = context.options) === null || _a === void 0 ? void 0 : _a.disableSiweRedirect)) {\n                    context.setRoute(routes.SIGNINWITHETHEREUM);\n                }\n                else {\n                    onModalClose(); // Hide on connect\n                }\n            }\n        }\n        else {\n            onModalClose(); // Hide on connect\n        }\n    }, [isConnected]);\n    /* When pulling data into WalletConnect, it prioritises the og:title tag over the title tag */\n    useEffect(() => {\n        const appName = getAppName();\n        if (!appName || (!open && !inline))\n            return;\n        const title = document.createElement('meta');\n        title.setAttribute('property', 'og:title');\n        title.setAttribute('content', appName);\n        document.head.prepend(title);\n        return () => {\n            document.head.removeChild(title);\n        };\n    }, [open, inline]);\n    return (_jsx(Web3ContextProvider, { enabled: isOpen, children: _jsx(ConnectKitThemeProvider, { theme: theme, customTheme: customTheme, mode: mode, children: _jsxs(Container, { ref: ref, children: [inline && onClose && (_jsxs(_Fragment, { children: [_jsx(Cursor, { ref: cursorRef }), _jsx(ButtonContainer, { children: _jsx(ConnectKitButton, { customTheme: customTheme, theme: theme, mode: mode }) })] })), _jsx(Modal, { demo: { theme: theme, customTheme: customTheme, mode: mode }, onClose: closeable ? onModalClose : undefined, positionInside: inline, open: isOpen, pages: pages, pageId: context.route, onInfo: showInfoButton ? () => context.setRoute(routes.ABOUT) : undefined, onBack: showBackButton ? onBack : undefined })] }) }) }));\n};\nexport default ConnectModal;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/types.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/Onboarding/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/About/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/Connectors/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectModal/ConnectUsing.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/DownloadApp/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/Profile/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/SwitchNetworks/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/MobileConnectors/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/SignInWithEthereum/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectButton/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/defaultConfig.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKitThemeProvider/ConnectKitThemeProvider.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/styles/styled/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/styled-components/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/contexts/web3/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useChainIsSupported.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/ConnectModal/demo.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\nimport { CustomTheme, Languages, Theme, Mode } from '../../types';\ndeclare const ConnectModal: React.FC<{\n    theme?: Theme;\n    mode?: Mode;\n    customTheme?: CustomTheme;\n    lang?: Languages;\n    inline?: boolean;\n    open?: boolean;\n    onClose?: () => void;\n}>;\nexport default ConnectModal;\n"}}

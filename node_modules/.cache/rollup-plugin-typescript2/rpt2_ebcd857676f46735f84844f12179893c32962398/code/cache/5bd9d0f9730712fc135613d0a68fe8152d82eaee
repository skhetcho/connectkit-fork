{"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport QRCodeUtil from 'qrcode';\nimport { useMemo } from 'react';\nconst generateMatrix = (value, errorCorrectionLevel) => {\n    const arr = Array.prototype.slice.call(QRCodeUtil.create(value, { errorCorrectionLevel }).modules.data, 0);\n    const sqrt = Math.sqrt(arr.length);\n    return arr.reduce((rows, key, index) => (index % sqrt === 0\n        ? rows.push([key])\n        : rows[rows.length - 1].push(key)) && rows, []);\n};\nexport function QRCode({ ecl = 'M', size: sizeProp = 200, uri, clearArea = false, image, imageBackground = 'transparent', }) {\n    const logoSize = clearArea ? 76 : 0;\n    const size = sizeProp - 10 * 2;\n    const dots = useMemo(() => {\n        const dots = [];\n        const matrix = generateMatrix(uri, ecl);\n        const cellSize = size / matrix.length;\n        let qrList = [\n            { x: 0, y: 0 },\n            { x: 1, y: 0 },\n            { x: 0, y: 1 },\n        ];\n        qrList.forEach(({ x, y }) => {\n            const x1 = (matrix.length - 7) * cellSize * x;\n            const y1 = (matrix.length - 7) * cellSize * y;\n            for (let i = 0; i < 3; i++) {\n                dots.push(_jsx(\"rect\", { fill: i % 2 !== 0\n                        ? 'var(--ck-qr-background, var(--ck-body-background))'\n                        : 'var(--ck-qr-dot-color)', rx: (i - 2) * -5 + (i === 0 ? 2 : 3), ry: (i - 2) * -5 + (i === 0 ? 2 : 3), width: cellSize * (7 - i * 2), height: cellSize * (7 - i * 2), x: x1 + cellSize * i, y: y1 + cellSize * i }, `${i}-${x}-${y}`));\n            }\n        });\n        if (image) {\n            const x1 = (matrix.length - 7) * cellSize * 1;\n            const y1 = (matrix.length - 7) * cellSize * 1;\n            dots.push(_jsxs(_Fragment, { children: [_jsx(\"rect\", { fill: imageBackground, rx: (0 - 2) * -5 + 2, ry: (0 - 2) * -5 + 2, width: cellSize * (7 - 0 * 2), height: cellSize * (7 - 0 * 2), x: x1 + cellSize * 0, y: y1 + cellSize * 0 }), _jsx(\"foreignObject\", { width: cellSize * (7 - 0 * 2), height: cellSize * (7 - 0 * 2), x: x1 + cellSize * 0, y: y1 + cellSize * 0, children: _jsx(\"div\", { style: { borderRadius: (0 - 2) * -5 + 2, overflow: 'hidden' }, children: image }) })] }));\n        }\n        const clearArenaSize = Math.floor((logoSize + 25) / cellSize);\n        const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;\n        const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;\n        matrix.forEach((row, i) => {\n            row.forEach((_, j) => {\n                if (matrix[i][j]) {\n                    // Do not render dots under position squares\n                    if (!((i < 7 && j < 7) ||\n                        (i > matrix.length - 8 && j < 7) ||\n                        (i < 7 && j > matrix.length - 8))) {\n                        //if (image && i > matrix.length - 9 && j > matrix.length - 9) return;\n                        if (image ||\n                            !(i > matrixMiddleStart &&\n                                i < matrixMiddleEnd &&\n                                j > matrixMiddleStart &&\n                                j < matrixMiddleEnd)) {\n                            dots.push(_jsx(\"circle\", { cx: i * cellSize + cellSize / 2, cy: j * cellSize + cellSize / 2, fill: \"var(--ck-qr-dot-color)\", r: cellSize / 3 }, `circle-${i}-${j}`));\n                        }\n                    }\n                }\n            });\n        });\n        return dots;\n    }, [ecl, size, uri]);\n    return (_jsxs(\"svg\", { height: size, width: size, viewBox: `0 0 ${size} ${size}`, style: {\n            width: size,\n            height: size,\n        }, children: [_jsx(\"rect\", { fill: \"transparent\", height: size, width: size }), dots] }));\n}\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/qrcode/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Common/CustomQRCode/QRCode.d.ts","writeByteOrderMark":false,"text":"import QRCodeUtil from 'qrcode';\nimport React from 'react';\ntype Props = {\n    ecl?: QRCodeUtil.QRCodeErrorCorrectionLevel;\n    size?: number;\n    uri: string;\n    clearArea?: boolean;\n    image?: React.ReactNode;\n    imageBackground?: string;\n};\nexport declare function QRCode({ ecl, size: sizeProp, uri, clearArea, image, imageBackground, }: Props): import(\"react/jsx-runtime\").JSX.Element;\nexport {};\n"}}

{"code":"import React from 'react';\nimport { detect } from 'detect-browser';\nconst truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/;\nconst truncateEthAddress = (address, separator = '••••') => {\n    if (!address)\n        return '';\n    const match = address.match(truncateRegex);\n    if (!match)\n        return address;\n    return `${match[1]}${separator}${match[2]}`;\n};\nconst truncateENSAddress = (ensName, maxLength) => {\n    if (ensName.length > maxLength) {\n        return ensName.replace('.eth', '').slice(0, maxLength) + '...';\n    }\n    else {\n        return ensName;\n    }\n};\nconst nFormatter = (num, digits = 2) => {\n    if (num < 10000)\n        return num.toFixed(2);\n    const lookup = [\n        { value: 1, symbol: '' },\n        { value: 1e3, symbol: 'k' },\n        { value: 1e6, symbol: 'm' },\n        { value: 1e9, symbol: 'g' },\n        { value: 1e12, symbol: 't' },\n        { value: 1e15, symbol: 'p' },\n        { value: 1e18, symbol: 'e' },\n    ];\n    const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    var item = lookup\n        .slice()\n        .reverse()\n        .find(function (item) {\n        return num >= item.value;\n    });\n    return item\n        ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol\n        : '0';\n};\nconst detectBrowser = () => {\n    var _a;\n    const browser = detect();\n    return (_a = browser === null || browser === void 0 ? void 0 : browser.name) !== null && _a !== void 0 ? _a : '';\n};\nconst detectOS = () => {\n    var _a;\n    const browser = detect();\n    return (_a = browser === null || browser === void 0 ? void 0 : browser.os) !== null && _a !== void 0 ? _a : '';\n};\nconst isIOS = () => {\n    const os = detectOS();\n    return os.toLowerCase().includes('ios');\n};\nconst isAndroid = () => {\n    const os = detectOS();\n    return os.toLowerCase().includes('android');\n};\nconst isMobile = () => {\n    return isAndroid() || isIOS();\n};\nfunction flattenChildren(children) {\n    const childrenArray = React.Children.toArray(children);\n    return childrenArray.reduce((flatChildren, child) => {\n        if (child.type === React.Fragment) {\n            return flatChildren.concat(flattenChildren(child.props.children));\n        }\n        flatChildren.push(child);\n        return flatChildren;\n    }, []);\n}\nexport const isWalletConnectConnector = (connectorId) => connectorId === 'walletConnect';\nexport const isMetaMaskConnector = (connectorId) => connectorId === 'metaMaskSDK';\nexport const isCoinbaseWalletConnector = (connectorId) => connectorId === 'coinbaseWalletSDK';\nexport const isLedgerConnector = (connectorId) => connectorId === 'ledger';\nexport const isSafeConnector = (connectorId) => connectorId === 'safe';\nexport const isInjectedConnector = (connectorId) => connectorId === 'injected';\nexport { nFormatter, truncateEthAddress, truncateENSAddress, isMobile, isAndroid, detectBrowser, detectOS, flattenChildren, };\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/detect-browser/index.d.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/utils/index.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\nimport React from 'react';\ndeclare const truncateEthAddress: (address?: string, separator?: string) => string;\ndeclare const truncateENSAddress: (ensName: string, maxLength: number) => string;\ndeclare const nFormatter: (num: number, digits?: number) => string;\ndeclare const detectBrowser: () => \"\" | import(\"detect-browser\").Browser | \"bot\" | \"node\" | \"react-native\";\ndeclare const detectOS: () => \"\" | import(\"detect-browser\").OperatingSystem | NodeJS.Platform;\ndeclare const isAndroid: () => boolean;\ndeclare const isMobile: () => boolean;\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\ndeclare function flattenChildren(children: React.ReactNode): ReactChildArray;\nexport declare const isWalletConnectConnector: (connectorId?: string) => boolean;\nexport declare const isMetaMaskConnector: (connectorId?: string) => boolean;\nexport declare const isCoinbaseWalletConnector: (connectorId?: string) => boolean;\nexport declare const isLedgerConnector: (connectorId?: string) => boolean;\nexport declare const isSafeConnector: (connectorId?: string) => boolean;\nexport declare const isInjectedConnector: (connectorId?: string) => boolean;\nexport { nFormatter, truncateEthAddress, truncateENSAddress, isMobile, isAndroid, detectBrowser, detectOS, flattenChildren, };\n"}}

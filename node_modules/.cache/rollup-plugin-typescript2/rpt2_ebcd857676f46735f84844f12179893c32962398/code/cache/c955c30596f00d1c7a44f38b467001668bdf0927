{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useConnectors } from '../hooks/useConnectors';\nimport { walletConfigs } from './walletConfigs';\nimport { useContext } from '../components/ConnectKit';\nimport { isCoinbaseWalletConnector, isInjectedConnector } from '../utils';\nexport const useWallet = (id) => {\n    const wallets = useWallets();\n    const wallet = wallets.find((c) => c.id === id);\n    if (!wallet)\n        return null;\n    return wallet;\n};\nexport const useWallets = () => {\n    const connectors = useConnectors();\n    const context = useContext();\n    const wallets = connectors.map((connector) => {\n        var _a, _b;\n        // use overrides\n        const walletId = Object.keys(walletConfigs).find(\n        // where id is comma seperated list\n        (id) => id\n            .split(',')\n            .map((i) => i.trim())\n            .indexOf(connector.id) !== -1);\n        const c = {\n            id: connector.id,\n            name: (_b = (_a = connector.name) !== null && _a !== void 0 ? _a : connector.id) !== null && _b !== void 0 ? _b : connector.type,\n            icon: (_jsx(\"img\", { src: connector.icon, alt: connector.name, width: '100%', height: '100%' })),\n            connector,\n            iconShape: 'squircle',\n            isInstalled: connector.type === 'mock' ||\n                (connector.type === 'injected' && connector.id !== 'metaMask') ||\n                isCoinbaseWalletConnector(connector.id), // always run coinbase wallet SDK\n        };\n        if (walletId) {\n            const wallet = walletConfigs[walletId];\n            return {\n                ...c,\n                iconConnector: connector.icon ? (_jsx(\"img\", { src: connector.icon, alt: connector.name, width: '100%', height: '100%' })) : undefined,\n                ...wallet,\n            };\n        }\n        return c;\n    });\n    return (wallets\n        // remove duplicate ids\n        .filter((wallet, index, self) => self.findIndex((w) => w.id === wallet.id) === index)\n        // Replace walletConnect's name with the one from options\n        .map((wallet) => {\n        var _a, _b;\n        if (wallet.id === 'walletConnect') {\n            return {\n                ...wallet,\n                name: ((_a = context.options) === null || _a === void 0 ? void 0 : _a.walletConnectName) || wallet.name,\n                shortName: ((_b = context.options) === null || _b === void 0 ? void 0 : _b.walletConnectName) || wallet.shortName,\n            };\n        }\n        return wallet;\n    })\n        // remove wallet with id coinbaseWalletSDK if wallet with id 'com.coinbase.wallet' exists\n        .filter((wallet, index, self) => !(wallet.id === 'coinbaseWalletSDK' &&\n        self.find((w) => w.id === 'com.coinbase.wallet')))\n        // remove wallet with id io.metamask if wallet with id 'metaMask' exists\n        .filter((wallet, index, self) => !((wallet.id === 'metaMaskSDK' || wallet.id === 'metaMask') &&\n        self.find((w) => w.id === 'io.metamask' || w.id === 'io.metamask.mobile')))\n        // order by isInstalled injected connectors first\n        .sort((a, b) => {\n        const AisInstalled = a.isInstalled && isInjectedConnector(a.connector.type);\n        const BisInstalled = b.isInstalled && isInjectedConnector(b.connector.type);\n        if (AisInstalled && !BisInstalled)\n            return -1;\n        if (!AisInstalled && BisInstalled)\n            return 1;\n        return 0;\n    })\n        // move walletConnect to the end\n        .sort((a, b) => {\n        if (a.id === 'walletConnect')\n            return 1;\n        if (b.id === 'walletConnect')\n            return -1;\n        return 0;\n    }));\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useConnectors.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/wallets/walletConfigs.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/utils/index.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/wallets/useWallets.d.ts","writeByteOrderMark":false,"text":"import { Connector } from 'wagmi';\nimport { WalletConfigProps } from './walletConfigs';\nexport type WalletProps = {\n    id: string;\n    connector: Connector;\n    isInstalled?: boolean;\n} & WalletConfigProps;\nexport declare const useWallet: (id: string) => WalletProps | null;\nexport declare const useWallets: () => WalletProps[];\n"}}

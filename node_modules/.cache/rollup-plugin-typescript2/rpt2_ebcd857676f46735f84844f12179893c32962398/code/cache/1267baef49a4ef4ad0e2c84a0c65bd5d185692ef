{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef } from 'react';\nimport { MoreIndicator, ScrollAreaContainer, ScrollContainer } from './styles';\nimport useIsMobile from '../../../hooks/useIsMobile';\nconst ArrowDown = () => (_jsx(\"svg\", { width: \"11\", height: \"12\", viewBox: \"0 0 11 12\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", children: _jsx(\"path\", { d: \"M5.49438 1L5.49438 11M5.49438 11L9.5 7M5.49438 11L1.5 7\", stroke: \"currentColor\", strokeWidth: \"1.75\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }) }));\nexport const ScrollArea = ({ children, height, backgroundColor, mobileDirection, }) => {\n    const ref = useRef(null);\n    const moreRef = useRef(null);\n    const isMobile = useIsMobile();\n    useEffect(() => {\n        const el = ref.current;\n        if (!el)\n            return;\n        // if ref is not scrollable, hide the more indicator\n        if (el.scrollHeight > el.clientHeight) {\n            if (moreRef.current) {\n                moreRef.current.classList.remove('hide');\n            }\n        }\n        const handleScroll = (e) => {\n            const { scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth, } = e.target;\n            if (moreRef.current) {\n                if (scrollTop > 0) {\n                    moreRef.current.classList.add('hide');\n                }\n            }\n            if (scrollTop === 0 && scrollLeft === 0) {\n                el.classList.add('scroll-start');\n            }\n            else {\n                el.classList.remove('scroll-start');\n            }\n            if (scrollHeight - scrollTop === clientHeight &&\n                scrollWidth - scrollLeft === clientWidth) {\n                el.classList.add('scroll-end');\n            }\n            else {\n                el.classList.remove('scroll-end');\n            }\n        };\n        el.addEventListener('scroll', handleScroll);\n        handleScroll({ target: el });\n        return () => {\n            el.removeEventListener('scroll', handleScroll);\n        };\n    }, [ref.current]);\n    return (_jsxs(ScrollContainer, { children: [_jsx(ScrollAreaContainer, { ref: ref, \"$mobile\": isMobile, \"$height\": height, \"$backgroundColor\": backgroundColor, \"$mobileDirection\": mobileDirection, children: children }), _jsx(MoreIndicator, { ref: moreRef, className: \"hide\", onClick: () => {\n                    if (ref.current) {\n                        ref.current.scrollTo({\n                            top: ref.current.scrollHeight,\n                            behavior: 'smooth',\n                        });\n                    }\n                }, children: _jsxs(\"span\", { children: [_jsx(ArrowDown, {}), \" More Available\"] }) })] }));\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/ScrollArea/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useIsMobile.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Common/ScrollArea/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nexport declare const ScrollArea: ({ children, height, backgroundColor, mobileDirection, }: {\n    children: React.ReactNode;\n    height?: number | undefined;\n    backgroundColor?: string | undefined;\n    mobileDirection?: \"horizontal\" | \"vertical\" | undefined;\n}) => import(\"react/jsx-runtime\").JSX.Element;\n"}}

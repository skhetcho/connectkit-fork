{"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React, { createContext, createElement, useEffect, useState, } from 'react';\nimport { Buffer } from 'buffer';\nimport defaultTheme from '../styles/defaultTheme';\nimport ConnectKitModal from '../components/ConnectModal';\nimport { ThemeProvider } from 'styled-components';\nimport { useThemeFont } from '../hooks/useGoogleFont';\nimport { SIWEContext } from './../siwe';\nimport { useChains } from '../hooks/useChains';\nimport { useConnectCallback, } from '../hooks/useConnectCallback';\nimport { isFamily } from '../utils/wallets';\nimport { useConnector } from '../hooks/useConnectors';\nimport { WagmiContext, useAccount } from 'wagmi';\nimport { Web3ContextProvider } from './contexts/web3';\nimport { useChainIsSupported } from '../hooks/useChainIsSupported';\nexport const routes = {\n    ONBOARDING: 'onboarding',\n    ABOUT: 'about',\n    CONNECTORS: 'connectors',\n    MOBILECONNECTORS: 'mobileConnectors',\n    CONNECT: 'connect',\n    DOWNLOAD: 'download',\n    PROFILE: 'profile',\n    SWITCHNETWORKS: 'switchNetworks',\n    SIGNINWITHETHEREUM: 'signInWithEthereum',\n};\nexport const Context = createContext(null);\nexport const ConnectKitProvider = ({ children, theme = 'auto', mode = 'auto', customTheme, options, onConnect, onDisconnect, debugMode = false, }) => {\n    var _a, _b, _c, _d;\n    // ConnectKitProvider must be within a WagmiProvider\n    if (!React.useContext(WagmiContext)) {\n        throw Error('ConnectKitProvider must be within a WagmiProvider');\n    }\n    // Only allow for mounting ConnectKitProvider once, so we avoid weird global\n    // state collisions.\n    if (React.useContext(Context)) {\n        throw new Error('Multiple, nested usages of ConnectKitProvider detected. Please use only one.');\n    }\n    useConnectCallback({\n        onConnect,\n        onDisconnect,\n    });\n    const chains = useChains();\n    const injectedConnector = useConnector('injected');\n    // Default config options\n    const defaultOptions = {\n        language: 'en-US',\n        hideBalance: false,\n        hideTooltips: false,\n        hideQuestionMarkCTA: false,\n        hideNoWalletCTA: false,\n        walletConnectCTA: 'link',\n        hideRecentBadge: false,\n        avoidLayoutShift: true,\n        embedGoogleFonts: false,\n        truncateLongENSAddress: true,\n        walletConnectName: undefined,\n        reducedMotion: false,\n        disclaimer: null,\n        bufferPolyfill: true,\n        customAvatar: undefined,\n        initialChainId: (_a = chains === null || chains === void 0 ? void 0 : chains[0]) === null || _a === void 0 ? void 0 : _a.id,\n        enforceSupportedChains: false,\n        ethereumOnboardingUrl: undefined,\n        walletOnboardingUrl: undefined,\n        disableSiweRedirect: false,\n    };\n    const opts = Object.assign({}, defaultOptions, options);\n    if (typeof window !== 'undefined') {\n        // Buffer Polyfill, needed for bundlers that don't provide Node polyfills (e.g CRA, Vite, etc.)\n        if (opts.bufferPolyfill)\n            window.Buffer = (_b = window.Buffer) !== null && _b !== void 0 ? _b : Buffer;\n        // Some bundlers may need `global` and `process.env` polyfills as well\n        // Not implemented here to avoid unexpected behaviors, but leaving example here for future reference\n        /*\n         * window.global = window.global ?? window;\n         * window.process = window.process ?? { env: {} };\n         */\n    }\n    const [ckTheme, setTheme] = useState(theme);\n    const [ckMode, setMode] = useState(mode);\n    const [ckCustomTheme, setCustomTheme] = useState(customTheme !== null && customTheme !== void 0 ? customTheme : {});\n    const [ckLang, setLang] = useState('en-US');\n    const [open, setOpen] = useState(false);\n    const [connector, setConnector] = useState({\n        id: '',\n    });\n    const [route, setRoute] = useState(routes.CONNECTORS);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [resize, onResize] = useState(0);\n    // Include Google Font that is needed for a themes\n    if (opts.embedGoogleFonts)\n        useThemeFont(theme);\n    // Other Configuration\n    useEffect(() => setTheme(theme), [theme]);\n    useEffect(() => setLang(opts.language || 'en-US'), [opts.language]);\n    useEffect(() => setErrorMessage(null), [route, open]);\n    // Check if chain is supported, elsewise redirect to switches page\n    const { chain, isConnected } = useAccount();\n    const isChainSupported = useChainIsSupported(chain === null || chain === void 0 ? void 0 : chain.id);\n    useEffect(() => {\n        if (isConnected && opts.enforceSupportedChains && !isChainSupported) {\n            setOpen(true);\n            setRoute(routes.SWITCHNETWORKS);\n        }\n    }, [isConnected, isChainSupported, chain, route, open]);\n    // Autoconnect to Family wallet if available\n    useEffect(() => {\n        if (isFamily()) {\n            injectedConnector === null || injectedConnector === void 0 ? void 0 : injectedConnector.connect();\n        }\n    }, [injectedConnector]);\n    const log = debugMode ? console.log : () => { };\n    const value = {\n        theme: ckTheme,\n        setTheme,\n        mode: ckMode,\n        setMode,\n        customTheme,\n        setCustomTheme,\n        lang: ckLang,\n        setLang,\n        open,\n        setOpen,\n        route,\n        setRoute,\n        connector,\n        setConnector,\n        signInWithEthereum: (_d = (_c = React.useContext(SIWEContext)) === null || _c === void 0 ? void 0 : _c.enabled) !== null && _d !== void 0 ? _d : false,\n        onConnect,\n        // Other configuration\n        options: opts,\n        errorMessage,\n        debugMode,\n        log,\n        displayError: (message, code) => {\n            setErrorMessage(message);\n            console.log('---------CONNECTKIT DEBUG---------');\n            console.log(message);\n            if (code)\n                console.table(code);\n            console.log('---------/CONNECTKIT DEBUG---------');\n        },\n        resize,\n        triggerResize: () => onResize((prev) => prev + 1),\n    };\n    return createElement(Context.Provider, { value }, _jsx(_Fragment, { children: _jsx(Web3ContextProvider, { enabled: open, children: _jsxs(ThemeProvider, { theme: defaultTheme, children: [children, _jsx(ConnectKitModal, { lang: ckLang, theme: ckTheme, mode: mode, customTheme: ckCustomTheme })] }) }) }));\n};\nexport const useContext = () => {\n    const context = React.useContext(Context);\n    if (!context)\n        throw Error('ConnectKit Hook must be inside a Provider.');\n    return context;\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/buffer/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/types.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/styles/defaultTheme.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectModal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/styled-components/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useGoogleFont.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/siwe/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useChains.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useConnectCallback.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/utils/wallets.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useConnectors.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/contexts/web3/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useChainIsSupported.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/ConnectKit.d.ts","writeByteOrderMark":false,"text":"import React, { ReactNode } from 'react';\nimport { CustomTheme, Languages, Mode, Theme, CustomAvatarProps } from '../types';\nimport { useConnectCallbackProps } from '../hooks/useConnectCallback';\nexport declare const routes: {\n    ONBOARDING: string;\n    ABOUT: string;\n    CONNECTORS: string;\n    MOBILECONNECTORS: string;\n    CONNECT: string;\n    DOWNLOAD: string;\n    PROFILE: string;\n    SWITCHNETWORKS: string;\n    SIGNINWITHETHEREUM: string;\n};\ntype Connector = {\n    id: string;\n};\ntype Error = string | React.ReactNode | null;\ntype ContextValue = {\n    theme: Theme;\n    setTheme: React.Dispatch<React.SetStateAction<Theme>>;\n    mode: Mode;\n    setMode: React.Dispatch<React.SetStateAction<Mode>>;\n    customTheme: CustomTheme | undefined;\n    setCustomTheme: React.Dispatch<React.SetStateAction<CustomTheme | undefined>>;\n    lang: Languages;\n    setLang: React.Dispatch<React.SetStateAction<Languages>>;\n    open: boolean;\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n    route: string;\n    setRoute: React.Dispatch<React.SetStateAction<string>>;\n    connector: Connector;\n    setConnector: React.Dispatch<React.SetStateAction<Connector>>;\n    errorMessage: Error;\n    options?: ConnectKitOptions;\n    signInWithEthereum: boolean;\n    debugMode?: boolean;\n    log: (...props: any) => void;\n    displayError: (message: string | React.ReactNode | null, code?: any) => void;\n    resize: number;\n    triggerResize: () => void;\n} & useConnectCallbackProps;\nexport declare const Context: React.Context<ContextValue | null>;\nexport type ConnectKitOptions = {\n    language?: Languages;\n    hideBalance?: boolean;\n    hideTooltips?: boolean;\n    hideQuestionMarkCTA?: boolean;\n    hideNoWalletCTA?: boolean;\n    hideRecentBadge?: boolean;\n    walletConnectCTA?: 'link' | 'modal' | 'both';\n    avoidLayoutShift?: boolean;\n    embedGoogleFonts?: boolean;\n    truncateLongENSAddress?: boolean;\n    walletConnectName?: string;\n    reducedMotion?: boolean;\n    disclaimer?: ReactNode | string;\n    bufferPolyfill?: boolean;\n    customAvatar?: React.FC<CustomAvatarProps>;\n    initialChainId?: number;\n    enforceSupportedChains?: boolean;\n    ethereumOnboardingUrl?: string;\n    walletOnboardingUrl?: string;\n    disableSiweRedirect?: boolean;\n    overlayBlur?: number;\n};\ntype ConnectKitProviderProps = {\n    children?: React.ReactNode;\n    theme?: Theme;\n    mode?: Mode;\n    customTheme?: CustomTheme;\n    options?: ConnectKitOptions;\n    debugMode?: boolean;\n} & useConnectCallbackProps;\nexport declare const ConnectKitProvider: ({ children, theme, mode, customTheme, options, onConnect, onDisconnect, debugMode, }: ConnectKitProviderProps) => React.FunctionComponentElement<React.ProviderProps<ContextValue | null>>;\nexport declare const useContext: () => ContextValue;\nexport {};\n"}}

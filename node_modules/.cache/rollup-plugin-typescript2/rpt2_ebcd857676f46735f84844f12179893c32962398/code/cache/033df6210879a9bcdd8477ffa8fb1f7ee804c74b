{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useContext, useEffect, useState } from 'react';\nimport { useAccount, useAccountEffect, useSignMessage } from 'wagmi';\nimport { getAddress } from 'viem';\nimport { useQuery } from '@tanstack/react-query';\nimport { Context as ConnectKitContext } from './../components/ConnectKit';\nimport { SIWEContext, StatusState, } from './SIWEContext';\nexport const SIWE_NONCE_QUERY_KEY = 'ckSiweNonce';\nexport const SIWE_SESSION_QUERY_KEY = 'ckSiweSession';\nexport const SIWEProvider = ({ children, enabled = true, nonceRefetchInterval = 1000 * 60 * 5, sessionRefetchInterval = 1000 * 60 * 5, signOutOnDisconnect = true, signOutOnAccountChange = true, signOutOnNetworkChange = true, onSignIn, onSignOut, ...siweConfig }) => {\n    const [status, setStatus] = useState(StatusState.READY);\n    const resetStatus = () => setStatus(StatusState.READY);\n    // Only allow for mounting SIWEProvider once, so we avoid weird global state\n    // collisions.\n    if (useContext(SIWEContext)) {\n        throw new Error('Multiple, nested usages of SIWEProvider detected. Please use only one.');\n    }\n    // SIWEProvider must be wrapped outside of ConnectKitProvider so that the\n    // ConnectKitButton and other UI can use SIWE context values.\n    if (useContext(ConnectKitContext)) {\n        throw new Error('ConnectKitProvider must be mounted inside SIWEProvider.');\n    }\n    const nonce = useQuery({\n        queryKey: [SIWE_NONCE_QUERY_KEY],\n        queryFn: () => siweConfig.getNonce(),\n        refetchInterval: nonceRefetchInterval,\n    });\n    const session = useQuery({\n        queryKey: [SIWE_SESSION_QUERY_KEY],\n        queryFn: () => siweConfig.getSession(),\n        refetchInterval: sessionRefetchInterval,\n    });\n    const sessionData = session.data;\n    const signOutAndRefetch = async () => {\n        if (!sessionData)\n            return false; // No session to sign out of\n        setStatus(StatusState.LOADING);\n        if (!(await siweConfig.signOut())) {\n            throw new Error('Failed to sign out.');\n        }\n        await Promise.all([session.refetch(), nonce.refetch()]);\n        setStatus(StatusState.READY);\n        onSignOut === null || onSignOut === void 0 ? void 0 : onSignOut();\n        return true;\n    };\n    const { address: connectedAddress } = useAccount();\n    useAccountEffect({\n        onDisconnect: () => {\n            if (signOutOnDisconnect) {\n                // For security reasons we sign out the user when a wallet disconnects.\n                signOutAndRefetch();\n            }\n        },\n    });\n    const { address, chain } = useAccount();\n    const { signMessageAsync } = useSignMessage();\n    const onError = (error) => {\n        console.error('signIn error', error, error.message);\n        switch (error.code) {\n            case -32000: // WalletConnect: user rejected\n            case 4001: // MetaMask: user rejected\n            case 'ACTION_REJECTED': // MetaMask: user rejected\n                setStatus(StatusState.REJECTED);\n                break;\n            default:\n                setStatus(StatusState.ERROR);\n        }\n    };\n    const signIn = async () => {\n        try {\n            if (!siweConfig) {\n                throw new Error('SIWE not configured');\n            }\n            const chainId = chain === null || chain === void 0 ? void 0 : chain.id;\n            if (!address)\n                throw new Error('No address found');\n            if (!chainId)\n                throw new Error('No chainId found');\n            if (!nonce.data) {\n                throw new Error('Could not fetch nonce');\n            }\n            setStatus(StatusState.LOADING);\n            const message = await siweConfig.createMessage({\n                address,\n                chainId,\n                nonce: nonce === null || nonce === void 0 ? void 0 : nonce.data,\n            });\n            // Ask user to sign message with their wallet\n            const signature = await signMessageAsync({\n                message,\n            });\n            // Verify signature\n            if (!(await siweConfig.verifyMessage({ message, signature }))) {\n                throw new Error('Error verifying SIWE signature');\n            }\n            const data = await session.refetch().then((res) => {\n                var _a;\n                onSignIn === null || onSignIn === void 0 ? void 0 : onSignIn((_a = res === null || res === void 0 ? void 0 : res.data) !== null && _a !== void 0 ? _a : undefined);\n                return res === null || res === void 0 ? void 0 : res.data;\n            });\n            setStatus(StatusState.READY);\n            return data;\n        }\n        catch (error) {\n            onError(error);\n            return false;\n        }\n    };\n    useEffect(() => {\n        // Skip if we're still fetching session state from backend\n        if (!sessionData || !sessionData.address || !sessionData.chainId)\n            return;\n        // Skip if wallet isn't connected (i.e. initial page load)\n        if (!connectedAddress || !chain)\n            return;\n        // If SIWE session no longer matches connected account, sign out\n        if (signOutOnAccountChange &&\n            getAddress(sessionData.address) !== getAddress(connectedAddress)) {\n            console.warn('Wallet account changed, signing out of SIWE session');\n            signOutAndRefetch();\n        }\n        // The SIWE spec includes a chainId parameter for contract-based accounts,\n        // so we're being extra cautious about keeping the SIWE session and the\n        // connected account/network in sync. But this can be disabled when\n        // configuring the SIWEProvider.\n        else if (signOutOnNetworkChange && sessionData.chainId !== chain.id) {\n            console.warn('Wallet network changed, signing out of SIWE session');\n            signOutAndRefetch();\n        }\n    }, [sessionData, connectedAddress, chain]);\n    return (_jsx(SIWEContext.Provider, { value: {\n            enabled,\n            nonceRefetchInterval,\n            sessionRefetchInterval,\n            signOutOnDisconnect,\n            signOutOnAccountChange,\n            signOutOnNetworkChange,\n            ...siweConfig,\n            nonce,\n            session,\n            signIn,\n            signOut: signOutAndRefetch,\n            status,\n            resetStatus,\n        }, children: children }));\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/viem/_types/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@tanstack/react-query/build/legacy/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/siwe/SIWEContext.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/siwe/SIWEProvider.d.ts","writeByteOrderMark":false,"text":"import { ReactNode } from 'react';\nimport { SIWEConfig, SIWESession } from './SIWEContext';\ntype Props = SIWEConfig & {\n    children: ReactNode;\n    onSignIn?: (data?: SIWESession) => void;\n    onSignOut?: () => void;\n};\nexport declare const SIWE_NONCE_QUERY_KEY = \"ckSiweNonce\";\nexport declare const SIWE_SESSION_QUERY_KEY = \"ckSiweSession\";\nexport declare const SIWEProvider: ({ children, enabled, nonceRefetchInterval, sessionRefetchInterval, signOutOnDisconnect, signOutOnAccountChange, signOutOnNetworkChange, onSignIn, onSignOut, ...siweConfig }: Props) => import(\"react/jsx-runtime\").JSX.Element;\nexport {};\n"}}

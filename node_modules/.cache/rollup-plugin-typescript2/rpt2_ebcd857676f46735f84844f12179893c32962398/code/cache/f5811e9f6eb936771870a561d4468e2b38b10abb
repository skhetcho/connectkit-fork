{"code":"import { injected, walletConnect, coinbaseWallet, safe, } from '@wagmi/connectors';\nconst defaultConnectors = ({ app, walletConnectProjectId, coinbaseWalletPreference, }) => {\n    const hasAllAppData = app.name && app.icon && app.description && app.url;\n    const shouldUseSafeConnector = !(typeof window === 'undefined') && (window === null || window === void 0 ? void 0 : window.parent) !== window;\n    const connectors = [];\n    // If we're in an iframe, include the SafeConnector\n    if (shouldUseSafeConnector) {\n        connectors.push(safe({\n            allowedDomains: [/gnosis-safe.io$/, /app.safe.global$/],\n        }));\n    }\n    // Add the rest of the connectors\n    connectors.push(injected({ target: 'metaMask' }), coinbaseWallet({\n        appName: app.name,\n        appLogoUrl: app.icon,\n        overrideIsMetaMask: false,\n        preference: coinbaseWalletPreference,\n    }));\n    if (walletConnectProjectId) {\n        connectors.push(walletConnect({\n            showQrModal: false,\n            projectId: walletConnectProjectId,\n            metadata: hasAllAppData\n                ? {\n                    name: app.name,\n                    description: app.description,\n                    url: app.url,\n                    icons: [app.icon],\n                }\n                : undefined,\n        }));\n    }\n    /*\n    connectors.push(\n      injected({\n        shimDisconnect: true,\n      })\n    );\n    */\n    return connectors;\n};\nexport default defaultConnectors;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@wagmi/connectors/dist/types/exports/index.d.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/defaultConnectors.d.ts","writeByteOrderMark":false,"text":"import { CreateConnectorFn } from 'wagmi';\nimport { CoinbaseWalletParameters } from '@wagmi/connectors';\ntype DefaultConnectorsProps = {\n    app: {\n        name: string;\n        icon?: string;\n        description?: string;\n        url?: string;\n    };\n    walletConnectProjectId?: string;\n    coinbaseWalletPreference?: CoinbaseWalletParameters<'4'>['preference'];\n};\ndeclare const defaultConnectors: ({ app, walletConnectProjectId, coinbaseWalletPreference, }: DefaultConnectorsProps) => CreateConnectorFn[];\nexport default defaultConnectors;\n"}}

{"code":"import { useEffect, useState, useLayoutEffect } from 'react';\nimport { useContext } from '../components/ConnectKit';\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default function useLockBodyScroll(initialLocked) {\n    const [locked, setLocked] = useState(initialLocked);\n    const context = useContext();\n    useIsomorphicLayoutEffect(() => {\n        var _a;\n        if (!locked)\n            return;\n        const original = {\n            overflow: document.body.style.overflow,\n            position: document.body.style.position,\n            touchAction: document.body.style.touchAction,\n            paddingRight: document.body.style.paddingRight,\n            //htmlOverflow: document.documentElement.style.overflow,\n        };\n        const style = getComputedStyle(document.body);\n        const offsetX = parseInt(style.marginRight) +\n            parseInt(style.paddingRight) +\n            parseInt(style.borderRight) +\n            parseInt(style.marginLeft) +\n            parseInt(style.paddingLeft) +\n            parseInt(style.borderLeft);\n        const scrollBarWidth = window.innerWidth - document.body.offsetWidth - offsetX;\n        document.documentElement.style.setProperty('--ck-scrollbar-width', `${scrollBarWidth}px`);\n        document.body.style.overflow = 'hidden';\n        document.body.style.position = 'relative';\n        document.body.style.touchAction = 'none';\n        //document.documentElement.style.overflow = 'hidden'; // overflow:hidden; on <html> breaks position:sticky;\n        if ((_a = context.options) === null || _a === void 0 ? void 0 : _a.avoidLayoutShift) {\n            document.body.style.paddingRight = `${scrollBarWidth}px`;\n        }\n        return () => {\n            var _a;\n            document.documentElement.style.removeProperty('--ck-scrollbar-width');\n            document.body.style.overflow = original.overflow;\n            document.body.style.position = original.position;\n            document.body.style.touchAction = original.touchAction;\n            //document.documentElement.style.overflow = original.htmlOverflow;\n            if ((_a = context.options) === null || _a === void 0 ? void 0 : _a.avoidLayoutShift) {\n                document.body.style.paddingRight = original.paddingRight;\n            }\n        };\n    }, [locked]);\n    useEffect(() => {\n        if (locked !== initialLocked)\n            setLocked(initialLocked);\n    }, [initialLocked]);\n    return [locked, setLocked];\n}\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/useLockBodyScroll.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\nexport default function useLockBodyScroll(initialLocked: boolean): (boolean | import(\"react\").Dispatch<import(\"react\").SetStateAction<boolean>>)[];\n"}}

{"code":"// https://github.com/saltycrane/use-fit-text\nimport { useCallback, useEffect, useLayoutEffect, useRef, useState, } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nconst LOG_LEVEL = {\n    debug: 10,\n    info: 20,\n    warn: 30,\n    error: 40,\n    none: 100,\n};\n// Suppress `useLayoutEffect` warning when rendering on the server\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsoLayoutEffect = typeof window !== 'undefined' &&\n    window.document &&\n    window.document.createElement !== undefined\n    ? useLayoutEffect\n    : useEffect;\nconst useFitText = ({ logLevel: logLevelOption = 'info', maxFontSize = 100, minFontSize = 20, onFinish, onStart, resolution = 5, } = {}) => {\n    const logLevel = LOG_LEVEL[logLevelOption];\n    const initState = useCallback(() => {\n        return {\n            calcKey: 0,\n            fontSize: maxFontSize,\n            fontSizePrev: minFontSize,\n            fontSizeMax: maxFontSize,\n            fontSizeMin: minFontSize,\n        };\n    }, [maxFontSize, minFontSize]);\n    const ref = useRef(null);\n    const innerHtmlPrevRef = useRef();\n    const isCalculatingRef = useRef(false);\n    const [state, setState] = useState(initState);\n    const { calcKey, fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;\n    // Montior div size changes and recalculate on resize\n    let animationFrameId = null;\n    const [ro] = useState(() => new ResizeObserver(() => {\n        animationFrameId = window.requestAnimationFrame(() => {\n            if (isCalculatingRef.current) {\n                return;\n            }\n            onStart && onStart();\n            isCalculatingRef.current = true;\n            // `calcKey` is used in the dependencies array of\n            // `useIsoLayoutEffect` below. It is incremented so that the font size\n            // will be recalculated even if the previous state didn't change (e.g.\n            // when the text fit initially).\n            setState({\n                ...initState(),\n                calcKey: calcKey + 1,\n            });\n        });\n    }));\n    useEffect(() => {\n        if (ref.current) {\n            ro.observe(ref.current);\n        }\n        return () => {\n            animationFrameId && window.cancelAnimationFrame(animationFrameId);\n            ro.disconnect();\n        };\n    }, [animationFrameId, ro]);\n    // Recalculate when the div contents change\n    const innerHtml = ref.current && ref.current.innerHTML;\n    useEffect(() => {\n        if (calcKey === 0 || isCalculatingRef.current)\n            return;\n        if (innerHtml !== innerHtmlPrevRef.current) {\n            onStart && onStart();\n            setState({\n                ...initState(),\n                calcKey: calcKey + 1,\n            });\n        }\n        innerHtmlPrevRef.current = innerHtml;\n    }, [calcKey, initState, innerHtml, onStart]);\n    // Check overflow and resize font\n    useIsoLayoutEffect(() => {\n        // Don't start calculating font size until the `resizeKey` is incremented\n        // above in the `ResizeObserver` callback. This avoids an extra resize\n        // on initialization.\n        if (calcKey === 0) {\n            return;\n        }\n        const isWithinResolution = Math.abs(fontSize - fontSizePrev) <= resolution;\n        const isOverflow = !!ref.current &&\n            (ref.current.scrollHeight > ref.current.offsetHeight ||\n                ref.current.scrollWidth > ref.current.offsetWidth);\n        const isFailed = isOverflow && fontSize === fontSizePrev;\n        const isAsc = fontSize > fontSizePrev;\n        // Return if the font size has been adjusted \"enough\" (change within `resolution`)\n        // reduce font size by one increment if it's overflowing.\n        if (isWithinResolution) {\n            if (isFailed) {\n                isCalculatingRef.current = false;\n                if (logLevel <= LOG_LEVEL.info) {\n                    console.info(`[use-fit-text] reached \\`minFontSize = ${minFontSize}\\` without fitting text`);\n                }\n            }\n            else if (isOverflow) {\n                setState({\n                    fontSize: isAsc ? fontSizePrev : fontSizeMin,\n                    fontSizeMax,\n                    fontSizeMin,\n                    fontSizePrev,\n                    calcKey,\n                });\n            }\n            else {\n                isCalculatingRef.current = false;\n                onFinish && onFinish(fontSize);\n            }\n            return;\n        }\n        // Binary search to adjust font size\n        let delta;\n        let newMax = fontSizeMax;\n        let newMin = fontSizeMin;\n        if (isOverflow) {\n            delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;\n            newMax = Math.min(fontSizeMax, fontSize);\n        }\n        else {\n            delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;\n            newMin = Math.max(fontSizeMin, fontSize);\n        }\n        setState({\n            calcKey,\n            fontSize: fontSize + delta / 2,\n            fontSizeMax: newMax,\n            fontSizeMin: newMin,\n            fontSizePrev: fontSize,\n        });\n    }, [\n        calcKey,\n        fontSize,\n        fontSizeMax,\n        fontSizeMin,\n        fontSizePrev,\n        onFinish,\n        ref,\n        resolution,\n    ]);\n    return { fontSize, ref };\n};\nexport default useFitText;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/resize-observer-polyfill/src/index.d.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/useFitText.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\nexport type TLogLevel = 'debug' | 'info' | 'warn' | 'error' | 'none';\nexport type TOptions = {\n    logLevel?: TLogLevel;\n    maxFontSize?: number;\n    minFontSize?: number;\n    onFinish?: (fontSize: number) => void;\n    onStart?: () => void;\n    resolution?: number;\n};\ndeclare const useFitText: ({ logLevel: logLevelOption, maxFontSize, minFontSize, onFinish, onStart, resolution, }?: TOptions) => {\n    fontSize: number;\n    ref: import(\"react\").RefObject<HTMLDivElement>;\n};\nexport default useFitText;\n"}}

{"code":"import { useContext } from 'react';\nimport { SIWEContext, StatusState } from './SIWEContext';\n// Consumer-facing hook\nexport const useSIWE = ({ onSignIn, onSignOut } = {}) => {\n    const siweContextValue = useContext(SIWEContext);\n    if (!siweContextValue) {\n        // If we throw an error here then this will break non-SIWE apps, so best to just respond with not signed in.\n        //throw new Error('useSIWE hook must be inside a SIWEProvider.');\n        return {\n            isSignedIn: false,\n            data: undefined,\n            status: StatusState.ERROR,\n            error: new Error('useSIWE hook must be inside a SIWEProvider.'),\n            isRejected: false,\n            isError: true,\n            isLoading: false,\n            isSuccess: false,\n            isReady: false,\n            reset: () => { },\n            signIn: () => Promise.reject(),\n            signOut: () => Promise.reject(),\n        };\n    }\n    const { session, nonce, status, signOut, signIn, resetStatus } = siweContextValue;\n    const { address, chainId } = session.data || {};\n    const currentStatus = address\n        ? StatusState.SUCCESS\n        : session.isLoading || nonce.isLoading\n            ? StatusState.LOADING\n            : status;\n    const isLoading = currentStatus === StatusState.LOADING;\n    const isSuccess = currentStatus === StatusState.SUCCESS;\n    const isRejected = currentStatus === StatusState.REJECTED;\n    const isError = currentStatus === StatusState.ERROR;\n    const isReady = !address || nonce.isFetching || isLoading || isSuccess;\n    const reset = () => resetStatus();\n    const isSignedIn = !!address;\n    return {\n        isSignedIn,\n        data: isSignedIn\n            ? {\n                address: address,\n                chainId: chainId,\n            }\n            : undefined,\n        status: currentStatus,\n        error: session.error || nonce.error,\n        isRejected,\n        isError,\n        isLoading,\n        isSuccess,\n        isReady,\n        signIn: async () => {\n            if (!isSignedIn) {\n                const data = await signIn();\n                if (data)\n                    onSignIn === null || onSignIn === void 0 ? void 0 : onSignIn(data);\n            }\n        },\n        signOut: async () => {\n            if (isSignedIn) {\n                await signOut();\n                onSignOut === null || onSignOut === void 0 ? void 0 : onSignOut();\n            }\n        },\n        reset,\n    };\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/siwe/SIWEContext.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/siwe/useSIWE.d.ts","writeByteOrderMark":false,"text":"import { StatusState, SIWESession } from './SIWEContext';\ntype HookProps = {\n    isSignedIn: boolean;\n    data?: SIWESession;\n    status: StatusState;\n    error?: Error | any;\n    isRejected: boolean;\n    isError: boolean;\n    isLoading: boolean;\n    isSuccess: boolean;\n    isReady: boolean;\n    reset: () => void;\n    signIn: () => Promise<boolean>;\n    signOut: () => Promise<boolean>;\n};\ntype UseSIWEConfig = {\n    onSignIn?: (data?: SIWESession) => void;\n    onSignOut?: () => void;\n};\nexport declare const useSIWE: ({ onSignIn, onSignOut }?: UseSIWEConfig) => HookProps | any;\nexport {};\n"}}

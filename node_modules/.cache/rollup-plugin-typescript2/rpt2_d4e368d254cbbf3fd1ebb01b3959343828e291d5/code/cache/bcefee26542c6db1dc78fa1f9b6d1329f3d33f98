{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useContext, routes } from '../../ConnectKit';\nimport { ConnectorsContainer, ConnectorButton, ConnectorLabel, ConnectorIcon, RecentlyUsedTag, } from './styles';\nimport { useWeb3 } from '../../contexts/web3';\nimport useIsMobile from '../../../hooks/useIsMobile';\nimport { ScrollArea } from '../../Common/ScrollArea';\nimport Alert from '../Alert';\nimport { useWallets } from '../../../wallets/useWallets';\nimport { detectBrowser, isCoinbaseWalletConnector, isWalletConnectConnector, } from '../../../utils';\nimport { useLastConnector } from '../../../hooks/useLastConnector';\nimport { useConnect } from '../../../hooks/useConnect';\nconst ConnectorList = () => {\n    var _a;\n    const context = useContext();\n    const isMobile = useIsMobile();\n    const wallets = useWallets();\n    const { lastConnectorId } = useLastConnector();\n    const walletsToDisplay = ((_a = context.options) === null || _a === void 0 ? void 0 : _a.hideRecentBadge) || lastConnectorId === 'walletConnect' // do not hoist walletconnect to top of list\n        ? wallets\n        : [\n            // move last used wallet to top of list\n            // using .filter and spread to avoid mutating original array order with .sort\n            ...wallets.filter((wallet) => lastConnectorId === wallet.connector.id),\n            ...wallets.filter((wallet) => lastConnectorId !== wallet.connector.id),\n        ];\n    return (_jsxs(ScrollArea, { mobileDirection: 'horizontal', children: [walletsToDisplay.length === 0 && (_jsx(Alert, { error: true, children: \"No connectors found in ConnectKit config.\" })), walletsToDisplay.length > 0 && (_jsx(ConnectorsContainer, { \"$mobile\": isMobile, \"$totalResults\": walletsToDisplay.length, children: walletsToDisplay.map((wallet) => (_jsx(ConnectorItem, { wallet: wallet, isRecent: wallet.id === lastConnectorId }, wallet.id))) }))] }));\n};\nexport default ConnectorList;\nconst ConnectorItem = ({ wallet, isRecent, }) => {\n    var _a, _b, _c, _d;\n    const { connect: { getUri }, } = useWeb3();\n    const uri = getUri();\n    const isMobile = useIsMobile();\n    const context = useContext();\n    const { connect } = useConnect();\n    /*\n    const [ready, setReady] = useState(false);\n    useEffect(() => {\n      (async () => {\n        const provider = await wallet.connector.getProvider();\n        setReady(!!provider);\n      })();\n    }, [wallet, setReady]);\n    */\n    let deeplink = (!wallet.isInstalled && isMobile) ||\n        (wallet.shouldDeeplinkDesktop && !isMobile)\n        ? (_a = wallet.getWalletConnectDeeplink) === null || _a === void 0 ? void 0 : _a.call(wallet, uri !== null && uri !== void 0 ? uri : '')\n        : undefined;\n    const redirectToMoreWallets = isMobile && isWalletConnectConnector(wallet.id);\n    // Safari requires opening popup on user gesture, so we connect immediately here\n    const shouldConnectImmediately = (detectBrowser() === 'safari' || detectBrowser() === 'ios') &&\n        isCoinbaseWalletConnector(wallet.connector.id);\n    if (redirectToMoreWallets || shouldConnectImmediately)\n        deeplink = undefined; // mobile redirects to more wallets page\n    // if deeplink begins with wc: then rewrite to wc://\n    if (deeplink && deeplink.startsWith('wc:')) {\n        deeplink = deeplink.replace('wc:', 'wc://');\n    }\n    console.log('deeplink', deeplink);\n    return (_jsxs(ConnectorButton, { type: \"button\", as: deeplink ? 'a' : undefined, href: deeplink ? deeplink : undefined, disabled: context.route !== routes.CONNECTORS, onClick: deeplink\n            ? undefined\n            : () => {\n                if (redirectToMoreWallets) {\n                    context.setRoute(routes.MOBILECONNECTORS);\n                }\n                else {\n                    if (shouldConnectImmediately) {\n                        connect({ connector: wallet === null || wallet === void 0 ? void 0 : wallet.connector });\n                    }\n                    context.setRoute(routes.CONNECT);\n                    context.setConnector({ id: wallet.id });\n                }\n            }, children: [_jsx(ConnectorIcon, { \"data-small\": wallet.iconShouldShrink, \"data-shape\": wallet.iconShape, children: (_b = wallet.iconConnector) !== null && _b !== void 0 ? _b : wallet.icon }), _jsxs(ConnectorLabel, { children: [isMobile ? (_c = wallet.shortName) !== null && _c !== void 0 ? _c : wallet.name : wallet.name, !((_d = context.options) === null || _d === void 0 ? void 0 : _d.hideRecentBadge) && isRecent && (_jsx(RecentlyUsedTag, { children: _jsx(\"span\", { children: \"Recent\" }) }))] })] }));\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/ConnectorList/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/contexts/web3/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useIsMobile.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/ScrollArea/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Alert/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/wallets/useWallets.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/utils/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLastConnector.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useConnect.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Common/ConnectorList/index.d.ts","writeByteOrderMark":false,"text":"declare const ConnectorList: () => import(\"react/jsx-runtime\").JSX.Element;\nexport default ConnectorList;\n"}}

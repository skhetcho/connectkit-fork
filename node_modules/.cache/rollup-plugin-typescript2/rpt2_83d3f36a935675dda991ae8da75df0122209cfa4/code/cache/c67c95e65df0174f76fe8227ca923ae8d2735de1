{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport styled from './../../../styles/styled';\nimport { css } from 'styled-components';\nimport CopyToClipboardIcon from './CopyToClipboardIcon';\nimport Button from '../Button';\nconst Container = styled.div.withConfig({ displayName: \"Container\", componentId: \"-dil6r6\" }) `\r\n  --color: var(--ck-copytoclipboard-stroke);\r\n  --bg: var(--ck-body-background);\r\n  transition: all 220ms cubic-bezier(0.175, 0.885, 0.32, 1.1);\r\n\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  ${(props) => props.$disabled\n    ? css `\r\n          cursor: not-allowed;\r\n          opacity: 0.4;\r\n        `\n    : css `\r\n          &:hover {\r\n            --color: var(--ck-body-color-muted);\r\n          }\r\n        `}\r\n`;\nconst OffsetContainer = styled.div.withConfig({ displayName: \"OffsetContainer\", componentId: \"-cawm3b\" }) `\r\n  display: block;\r\n  position: relative;\r\n  transition: inherit;\r\n  svg {\r\n    position: absolute;\r\n    left: 100%;\r\n    display: block;\r\n    top: -1px;\r\n    margin: 0;\r\n    margin-left: 4px;\r\n  }\r\n`;\nconst CopyToClipboard = ({ string, children, variant }) => {\n    const [clipboard, setClipboard] = useState(false);\n    let timeout;\n    const onCopy = () => {\n        if (!string)\n            return;\n        const str = string.trim();\n        if (navigator.clipboard) {\n            navigator.clipboard.writeText(str);\n        }\n        else {\n            // Fallback copy to clipboard if necessary\n            /*\n            const el = document.createElement('textarea');\n            el.value = str;\n            document.body.appendChild(el);\n            el.select();\n            document.execCommand('copy');\n            document.body.removeChild(el);\n            */\n        }\n        setClipboard(true);\n        clearTimeout(timeout);\n        timeout = setTimeout(() => setClipboard(false), 1000);\n    };\n    if (variant === 'button')\n        return (_jsx(Button, { disabled: !string, onClick: onCopy, icon: _jsx(CopyToClipboardIcon, { copied: clipboard }), children: children }));\n    return (_jsx(Container, { onClick: onCopy, \"$disabled\": !string, children: _jsxs(OffsetContainer, { children: [children, _jsx(CopyToClipboardIcon, { copied: clipboard, small: true })] }) }));\n};\nexport default CopyToClipboard;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/styles/styled/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/styled-components/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/CopyToClipboard/CopyToClipboardIcon.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Button/index.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Common/CopyToClipboard/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\ndeclare const CopyToClipboard: React.FC<{\n    string?: string;\n    children?: React.ReactNode;\n    variant?: 'button';\n}>;\nexport default CopyToClipboard;\n"}}

{"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { ResetContainer } from '../../../styles';\nimport Portal from '../Portal';\nimport { flattenChildren, isWalletConnectConnector, isMobile, } from '../../../utils';\nimport { Container, BoxContainer, ModalContainer, PageContainer, PageContents, ControllerContainer, InnerContainer, BackgroundOverlay, CloseButton, BackButton, InfoButton, ModalHeading, TextWithHr, ErrorMessage, DisclaimerBackground, Disclaimer, SiweButton, SignInTooltip, } from './styles';\nimport { routes, useContext } from '../../ConnectKit';\nimport useLockBodyScroll from '../../../hooks/useLockBodyScroll';\nimport { useTransition } from 'react-transition-state';\nimport FocusTrap from '../../../hooks/useFocusTrap';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useThemeContext } from '../../ConnectKitThemeProvider/ConnectKitThemeProvider';\nimport { useAccount, useSwitchChain } from 'wagmi';\nimport { AuthIcon } from '../../../assets/icons';\nimport { useSIWE } from '../../../siwe';\nimport useLocales from '../../../hooks/useLocales';\nimport FitText from '../FitText';\nimport { useWallet } from '../../../wallets/useWallets';\nconst ProfileIcon = ({ isSignedIn }) => (_jsxs(\"div\", { style: { position: 'relative' }, children: [isSignedIn ? (_jsx(AuthIcon, { style: {\n                bottom: -1,\n                right: -1,\n            } })) : (_jsx(\"div\", { style: {\n                zIndex: 2,\n                position: 'absolute',\n                top: -2,\n                right: -2,\n                background: '#1A88F8',\n                borderRadius: 8,\n                boxShadow: '0 0 0 2px var(--ck-body-background)',\n                width: 8,\n                height: 8,\n            } })), _jsxs(\"svg\", { \"aria-hidden\": \"true\", width: \"20\", height: \"20\", viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", style: { overflow: 'visible' }, children: [_jsx(\"circle\", { cx: \"10\", cy: \"10\", r: \"9\", stroke: \"currentColor\", strokeWidth: \"2\" }), _jsx(\"path\", { d: \"M16.5 16.775C14.8618 15.0649 12.5552 14 10 14C7.44477 14 5.13825 15.0649 3.5 16.775\", stroke: \"currentColor\", strokeWidth: \"2\" }), _jsx(\"circle\", { cx: \"10\", cy: \"8\", r: \"3\", stroke: \"currentColor\", strokeWidth: \"2\" })] })] }));\nconst InfoIcon = ({ ...props }) => (_jsx(\"svg\", { \"aria-hidden\": \"true\", width: \"22\", height: \"22\", viewBox: \"0 0 22 22\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props, children: _jsx(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M20 11C20 15.9706 15.9706 20 11 20C6.02944 20 2 15.9706 2 11C2 6.02944 6.02944 2 11 2C15.9706 2 20 6.02944 20 11ZM22 11C22 17.0751 17.0751 22 11 22C4.92487 22 0 17.0751 0 11C0 4.92487 4.92487 0 11 0C17.0751 0 22 4.92487 22 11ZM11.6445 12.7051C11.6445 13.1348 11.3223 13.4678 10.7744 13.4678C10.2266 13.4678 9.92578 13.1885 9.92578 12.6191V12.4795C9.92578 11.4268 10.4951 10.8574 11.2686 10.3203C12.2031 9.67578 12.665 9.32129 12.665 8.59082C12.665 7.76367 12.0205 7.21582 11.043 7.21582C10.3232 7.21582 9.80762 7.57031 9.45312 8.16113C9.38282 8.24242 9.32286 8.32101 9.2667 8.39461C9.04826 8.68087 8.88747 8.8916 8.40039 8.8916C8.0459 8.8916 7.66992 8.62305 7.66992 8.15039C7.66992 7.96777 7.70215 7.7959 7.75586 7.61328C8.05664 6.625 9.27051 5.75488 11.1182 5.75488C12.9336 5.75488 14.5234 6.71094 14.5234 8.50488C14.5234 9.7832 13.7822 10.417 12.7402 11.1045C11.999 11.5986 11.6445 11.9746 11.6445 12.5762V12.7051ZM11.9131 15.5625C11.9131 16.1855 11.376 16.6797 10.7529 16.6797C10.1299 16.6797 9.59277 16.1748 9.59277 15.5625C9.59277 14.9395 10.1191 14.4453 10.7529 14.4453C11.3867 14.4453 11.9131 14.9287 11.9131 15.5625Z\", fill: \"currentColor\" }) }));\nconst CloseIcon = ({ ...props }) => (_jsx(motion.svg, { width: 14, height: 14, viewBox: \"0 0 14 14\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props, children: _jsx(\"path\", { d: \"M1 13L13 1M1 1L13 13\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\" }) }));\nconst BackIcon = ({ ...props }) => (_jsx(motion.svg, { width: 9, height: 16, viewBox: \"0 0 9 16\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props, children: _jsx(\"path\", { d: \"M8 1L1 8L8 15\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }) }));\nconst contentTransitionDuration = 0.22;\nexport const contentVariants = {\n    initial: {\n        //willChange: 'transform,opacity',\n        zIndex: 2,\n        opacity: 0,\n    },\n    animate: {\n        opacity: 1,\n        scale: 1,\n        transition: {\n            duration: contentTransitionDuration * 0.75,\n            delay: contentTransitionDuration * 0.25,\n            ease: [0.26, 0.08, 0.25, 1],\n        },\n    },\n    exit: {\n        zIndex: 1,\n        opacity: 0,\n        pointerEvents: 'none',\n        position: 'absolute',\n        left: ['50%', '50%'],\n        x: ['-50%', '-50%'],\n        transition: {\n            duration: contentTransitionDuration,\n            ease: [0.26, 0.08, 0.25, 1],\n        },\n    },\n};\nconst Modal = ({ open, pages, pageId, positionInside, inline, demo, onClose, onBack, onInfo, }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const context = useContext();\n    const themeContext = useThemeContext();\n    const mobile = isMobile();\n    const { isSignedIn, reset } = useSIWE();\n    const wallet = useWallet((_a = context.connector) === null || _a === void 0 ? void 0 : _a.id);\n    const walletInfo = {\n        name: wallet === null || wallet === void 0 ? void 0 : wallet.name,\n        shortName: (_b = wallet === null || wallet === void 0 ? void 0 : wallet.shortName) !== null && _b !== void 0 ? _b : wallet === null || wallet === void 0 ? void 0 : wallet.name,\n        icon: (_c = wallet === null || wallet === void 0 ? void 0 : wallet.iconConnector) !== null && _c !== void 0 ? _c : wallet === null || wallet === void 0 ? void 0 : wallet.icon,\n        iconShape: (_d = wallet === null || wallet === void 0 ? void 0 : wallet.iconShape) !== null && _d !== void 0 ? _d : 'circle',\n        iconShouldShrink: wallet === null || wallet === void 0 ? void 0 : wallet.iconShouldShrink,\n    };\n    const locales = useLocales({\n        CONNECTORNAME: walletInfo === null || walletInfo === void 0 ? void 0 : walletInfo.name,\n    });\n    const [state, setOpen] = useTransition({\n        timeout: mobile ? 160 : 160, // different animations, 10ms extra to avoid final-frame drops\n        preEnter: true,\n        mountOnEnter: true,\n        unmountOnExit: true,\n    });\n    const mounted = !(state === 'exited' || state === 'unmounted');\n    const rendered = state === 'preEnter' || state !== 'exiting';\n    const currentDepth = context.route === routes.CONNECTORS\n        ? 0\n        : context.route === routes.DOWNLOAD\n            ? 2\n            : 1;\n    const prevDepth = usePrevious(currentDepth, currentDepth);\n    if (!positionInside)\n        useLockBodyScroll(mounted);\n    const prevPage = usePrevious(pageId, pageId);\n    useEffect(() => {\n        setOpen(open);\n        if (open)\n            setInTransition(undefined);\n    }, [open]);\n    const [dimensions, setDimensions] = useState({\n        width: undefined,\n        height: undefined,\n    });\n    const [inTransition, setInTransition] = useState(undefined);\n    // Calculate new content bounds\n    const updateBounds = (node) => {\n        const bounds = {\n            width: node === null || node === void 0 ? void 0 : node.offsetWidth,\n            height: node === null || node === void 0 ? void 0 : node.offsetHeight,\n        };\n        setDimensions({\n            width: `${bounds === null || bounds === void 0 ? void 0 : bounds.width}px`,\n            height: `${bounds === null || bounds === void 0 ? void 0 : bounds.height}px`,\n        });\n    };\n    let blockTimeout;\n    const contentRef = useCallback((node) => {\n        if (!node)\n            return;\n        ref.current = node;\n        // Avoid transition mixups\n        setInTransition(inTransition === undefined ? false : true);\n        clearTimeout(blockTimeout);\n        blockTimeout = setTimeout(() => setInTransition(false), 360);\n        // Calculate new content bounds\n        updateBounds(node);\n    }, [open, inTransition]);\n    // Update layout on chain/network switch to avoid clipping\n    const { chain } = useAccount();\n    const { switchChain } = useSwitchChain();\n    const ref = useRef(null);\n    useEffect(() => {\n        if (ref.current)\n            updateBounds(ref.current);\n    }, [chain, switchChain, mobile, isSignedIn, context.options, context.resize]);\n    useEffect(() => {\n        if (!mounted) {\n            setDimensions({\n                width: undefined,\n                height: undefined,\n            });\n            return;\n        }\n        const listener = (e) => {\n            if (e.key === 'Escape' && onClose)\n                onClose();\n        };\n        document.addEventListener('keydown', listener);\n        return () => {\n            document.removeEventListener('keydown', listener);\n        };\n    }, [mounted, onClose]);\n    const dimensionsCSS = {\n        '--height': dimensions.height,\n        '--width': dimensions.width,\n    };\n    function shouldUseQrcode() {\n        if (!wallet)\n            return false; // Fail states are shown in the injector flow\n        const useInjector = !wallet.getWalletConnectDeeplink || wallet.isInstalled;\n        return !useInjector;\n    }\n    function getHeading() {\n        var _a;\n        switch (context.route) {\n            case routes.ABOUT:\n                return locales.aboutScreen_heading;\n            case routes.CONNECT:\n                if (shouldUseQrcode()) {\n                    return isWalletConnectConnector((_a = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _a === void 0 ? void 0 : _a.id)\n                        ? locales.scanScreen_heading\n                        : locales.scanScreen_heading_withConnector;\n                }\n                else {\n                    return walletInfo === null || walletInfo === void 0 ? void 0 : walletInfo.name;\n                }\n            case routes.CONNECTORS:\n                return locales.connectorsScreen_heading;\n            case routes.MOBILECONNECTORS:\n                return locales.mobileConnectorsScreen_heading;\n            case routes.DOWNLOAD:\n                return locales.downloadAppScreen_heading;\n            case routes.ONBOARDING:\n                return locales.onboardingScreen_heading;\n            case routes.PROFILE:\n                return locales.profileScreen_heading;\n            case routes.SWITCHNETWORKS:\n                return locales.switchNetworkScreen_heading;\n            case routes.SIGNINWITHETHEREUM:\n                return isSignedIn\n                    ? locales.signInWithEthereumScreen_signedIn_heading\n                    : locales.signInWithEthereumScreen_signedOut_heading;\n            default:\n                return '';\n        }\n    }\n    const Content = (_jsx(ResetContainer, { \"$useTheme\": (_e = demo === null || demo === void 0 ? void 0 : demo.theme) !== null && _e !== void 0 ? _e : themeContext.theme, \"$useMode\": (_f = demo === null || demo === void 0 ? void 0 : demo.mode) !== null && _f !== void 0 ? _f : themeContext.mode, \"$customTheme\": (_g = demo === null || demo === void 0 ? void 0 : demo.customTheme) !== null && _g !== void 0 ? _g : themeContext.customTheme, children: _jsxs(ModalContainer, { role: \"dialog\", style: {\n                pointerEvents: rendered ? 'auto' : 'none',\n                position: positionInside ? 'absolute' : undefined,\n            }, children: [!inline && (_jsx(BackgroundOverlay, { \"$active\": rendered, onClick: onClose, \"$blur\": (_h = context.options) === null || _h === void 0 ? void 0 : _h.overlayBlur })), _jsxs(Container, { style: dimensionsCSS, initial: false, children: [_jsx(\"div\", { style: {\n                                pointerEvents: inTransition ? 'all' : 'none', // Block interaction while transitioning\n                                position: 'absolute',\n                                top: 0,\n                                bottom: 0,\n                                left: '50%',\n                                transform: 'translateX(-50%)',\n                                width: 'var(--width)',\n                                zIndex: 9,\n                                transition: 'width 200ms ease',\n                            } }), _jsxs(BoxContainer, { className: `${rendered && 'active'}`, children: [_jsx(AnimatePresence, { initial: false, children: ((_j = context.options) === null || _j === void 0 ? void 0 : _j.disclaimer) &&\n                                        context.route === routes.CONNECTORS && (_jsx(DisclaimerBackground, { initial: {\n                                            opacity: 0,\n                                        }, animate: {\n                                            opacity: 1,\n                                        }, exit: { opacity: 0 }, transition: {\n                                            delay: 0,\n                                            duration: 0.2,\n                                            ease: [0.25, 0.1, 0.25, 1.0],\n                                        }, children: _jsx(Disclaimer, { children: _jsx(\"div\", { children: (_k = context.options) === null || _k === void 0 ? void 0 : _k.disclaimer }) }) })) }), _jsx(AnimatePresence, { initial: false, children: context.errorMessage && (_jsxs(ErrorMessage, { initial: { y: '10%', x: '-50%' }, animate: { y: '-100%' }, exit: { y: '100%' }, transition: { duration: 0.2, ease: 'easeInOut' }, children: [_jsx(\"span\", { children: context.errorMessage }), _jsx(\"div\", { onClick: () => context.displayError(null), style: {\n                                                    position: 'absolute',\n                                                    right: 24,\n                                                    top: 24,\n                                                    cursor: 'pointer',\n                                                }, children: _jsx(CloseIcon, {}) })] })) }), _jsxs(ControllerContainer, { children: [onClose && (_jsx(CloseButton, { \"aria-label\": flattenChildren(locales.close).toString(), onClick: onClose, children: _jsx(CloseIcon, {}) })), _jsx(\"div\", { style: {\n                                                position: 'absolute',\n                                                top: 23,\n                                                left: 20,\n                                                width: 32,\n                                                height: 32,\n                                            }, children: _jsx(AnimatePresence, { children: onBack ? (_jsx(BackButton, { disabled: inTransition, \"aria-label\": flattenChildren(locales.back).toString(), onClick: onBack, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: {\n                                                        duration: mobile ? 0 : 0.1,\n                                                        delay: mobile ? 0.01 : 0,\n                                                    }, children: _jsx(BackIcon, {}) }, \"backButton\")) : context.route === routes.PROFILE &&\n                                                    context.signInWithEthereum ? (_jsxs(_Fragment, { children: [!isSignedIn && !((_l = context.options) === null || _l === void 0 ? void 0 : _l.hideTooltips) && (_jsx(motion.div, { style: {\n                                                                position: 'absolute',\n                                                                inset: 0,\n                                                                pointerEvents: 'none',\n                                                            }, initial: { opacity: 0, scale: 0.8 }, animate: {\n                                                                opacity: 1,\n                                                                scale: 1,\n                                                                transition: { delay: 0.5, duration: 0.2 },\n                                                            }, exit: {\n                                                                opacity: 0,\n                                                                scale: 0.6,\n                                                                transition: {\n                                                                    delay: 0,\n                                                                    duration: mobile ? 0 : 0.1,\n                                                                },\n                                                            }, children: _jsx(SignInTooltip, { children: locales.signInWithEthereumScreen_tooltip }) })), _jsx(SiweButton, { disabled: inTransition, \"aria-label\": locales.signInWithEthereumScreen_signedOut_heading, onClick: () => {\n                                                                reset();\n                                                                context.setRoute(routes.SIGNINWITHETHEREUM);\n                                                            }, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: {\n                                                                duration: mobile ? 0 : 0.1,\n                                                                delay: mobile ? 0.01 : 0,\n                                                            }, children: _jsx(ProfileIcon, { isSignedIn: isSignedIn }) }, \"siweButton\")] })) : (onInfo &&\n                                                    !((_m = context.options) === null || _m === void 0 ? void 0 : _m.hideQuestionMarkCTA) && (_jsx(InfoButton, { disabled: inTransition, \"aria-label\": flattenChildren(locales.moreInformation).toString(), onClick: onInfo, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: {\n                                                        duration: mobile ? 0 : 0.1,\n                                                        delay: mobile ? 0.01 : 0,\n                                                    }, children: _jsx(InfoIcon, {}) }, \"infoButton\"))) }) })] }), _jsx(ModalHeading, { children: _jsx(AnimatePresence, { children: _jsx(motion.div, { style: {\n                                                position: 'absolute',\n                                                top: 0,\n                                                bottom: 0,\n                                                left: 52,\n                                                right: 52,\n                                                display: 'flex',\n                                                //alignItems: 'center',\n                                                justifyContent: 'center',\n                                            }, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: {\n                                                duration: mobile ? 0 : 0.17,\n                                                delay: mobile ? 0.01 : 0,\n                                            }, children: _jsx(FitText, { children: getHeading() }) }, `${context.route}-${isSignedIn ? 'signedIn' : ''}`) }) }), _jsx(InnerContainer, { children: Object.keys(pages).map((key) => {\n                                        const page = pages[key];\n                                        return (\n                                        // TODO: We may need to use the follow check avoid unnecessary computations, but this causes a bug where the content flashes\n                                        // (key === pageId || key === prevPage) && (\n                                        _jsx(Page, { open: key === pageId, initial: !positionInside && state !== 'entered', enterAnim: key === pageId\n                                                ? currentDepth > prevDepth\n                                                    ? 'active-scale-up'\n                                                    : 'active'\n                                                : '', exitAnim: key !== pageId\n                                                ? currentDepth < prevDepth\n                                                    ? 'exit-scale-down'\n                                                    : 'exit'\n                                                : '', children: _jsx(PageContents, { ref: contentRef, style: {\n                                                    pointerEvents: key === pageId && rendered ? 'auto' : 'none',\n                                                }, children: page }, `inner-${key}`) }, key));\n                                    }) })] })] })] }) }));\n    return (_jsx(_Fragment, { children: mounted && (_jsx(_Fragment, { children: positionInside ? (Content) : (_jsx(_Fragment, { children: _jsx(Portal, { children: _jsx(FocusTrap, { children: Content }) }) })) })) }));\n};\nconst Page = ({ children, open, initial, prevDepth, currentDepth, enterAnim, exitAnim, }) => {\n    const [state, setOpen] = useTransition({\n        timeout: 400,\n        preEnter: true,\n        initialEntered: open,\n        mountOnEnter: true,\n        unmountOnExit: true,\n    });\n    const mounted = !(state === 'exited' || state === 'unmounted');\n    const rendered = state === 'preEnter' || state !== 'exiting';\n    useEffect(() => {\n        setOpen(open);\n    }, [open]);\n    if (!mounted)\n        return null;\n    return (_jsx(PageContainer, { className: `${rendered ? enterAnim : exitAnim}`, style: {\n            animationDuration: initial ? '0ms' : undefined,\n            animationDelay: initial ? '0ms' : undefined,\n        }, children: children }));\n};\nexport const OrDivider = ({ children }) => {\n    const locales = useLocales();\n    return (_jsx(TextWithHr, { children: _jsx(\"span\", { children: children !== null && children !== void 0 ? children : locales.or }) }));\n};\nexport default Modal;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/framer-motion/dist/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/styles/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Portal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/utils/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLockBodyScroll.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/react-transition-state/dist/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useFocusTrap.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/usePrevious.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/types.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKitThemeProvider/ConnectKitThemeProvider.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/assets/icons.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/siwe/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLocales.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/FitText/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/wallets/useWallets.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Common/Modal/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { Variants } from 'framer-motion';\nimport { CustomTheme } from '../../../types';\nexport declare const contentVariants: Variants;\ntype ModalProps = {\n    open?: boolean;\n    pages: any;\n    pageId: string;\n    positionInside?: boolean;\n    inline?: boolean;\n    onClose?: () => void;\n    onBack?: () => void;\n    onInfo?: () => void;\n    demo?: {\n        theme: string;\n        mode?: string;\n        customTheme: CustomTheme;\n    };\n};\ndeclare const Modal: React.FC<ModalProps>;\nexport declare const OrDivider: ({ children }: {\n    children?: React.ReactNode;\n}) => import(\"react/jsx-runtime\").JSX.Element;\nexport default Modal;\n"}}

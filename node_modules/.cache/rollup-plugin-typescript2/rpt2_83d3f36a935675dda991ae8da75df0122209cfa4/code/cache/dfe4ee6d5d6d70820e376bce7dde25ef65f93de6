{"code":"import { useEffect } from 'react';\nexport function useGoogleFont(font) {\n    useEffect(() => {\n        if (!font)\n            return;\n        font = font.replace(/ /g, '+');\n        const googleapis = document.createElement('link');\n        googleapis.href = `https://fonts.googleapis.com`;\n        googleapis.rel = 'preconnect';\n        const gstatic = document.createElement('link');\n        gstatic.href = `https://fonts.gstatic.com`;\n        gstatic.rel = 'preconnect';\n        gstatic.crossOrigin = 'true';\n        const link = document.createElement('link');\n        link.href = `https://fonts.googleapis.com/css2?family=${font}:wght@400;500;600&display=swap`;\n        link.rel = 'stylesheet';\n        document.head.appendChild(googleapis);\n        document.head.appendChild(gstatic);\n        document.head.appendChild(link);\n        return () => {\n            document.head.removeChild(googleapis);\n            document.head.removeChild(gstatic);\n            document.head.removeChild(link);\n        };\n    }, [font]);\n}\n// TODO: This could be dynamic if theming wasn't set up as css variables\nexport function useThemeFont(theme) {\n    var _a;\n    const themeFonts = {\n        web95: 'Lato',\n        retro: 'Nunito',\n        midnight: 'Inter',\n        minimal: 'Inter',\n        rounded: 'Nunito',\n    };\n    const font = (_a = themeFonts[theme]) !== null && _a !== void 0 ? _a : null;\n    useGoogleFont(font !== null && font !== void 0 ? font : '');\n}\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/types.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/useGoogleFont.d.ts","writeByteOrderMark":false,"text":"import { Theme } from '../types';\nexport declare function useGoogleFont(font: string): void;\nexport declare function useThemeFont(theme: Theme): void;\n"}}

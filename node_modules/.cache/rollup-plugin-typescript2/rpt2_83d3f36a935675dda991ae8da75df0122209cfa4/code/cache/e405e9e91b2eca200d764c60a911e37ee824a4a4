{"code":"import { useConnectors as useWagmiConnectors } from 'wagmi';\nexport function useConnectors() {\n    const connectors = useWagmiConnectors();\n    return connectors !== null && connectors !== void 0 ? connectors : [];\n}\nexport function useConnector(id, uuid) {\n    const connectors = useConnectors();\n    if (id === 'injected' && uuid) {\n        return connectors.find((c) => c.id === id && c.name === uuid);\n    }\n    else if (id === 'injected') {\n        return connectors.find((c) => c.id === id && c.name.includes('Injected'));\n    }\n    return connectors.find((c) => c.id === id);\n}\nexport function useInjectedConnector(uuid) {\n    /*\n    options: {\n      shimDisconnect: true,\n      name: (\n        detectedName: string | string[] // Detects the name of the injected wallet\n      ) =>\n        `Injected (${\n          typeof detectedName === 'string'\n            ? detectedName\n            : detectedName.join(', ')\n        })`,\n    }\n    */\n    return useConnector('injected', uuid);\n}\nexport function useWalletConnectConnector() {\n    /*\n    options: {\n      qrcode: false,\n      // or\n      showQrModal: false,\n    }\n    */\n    return useConnector('walletConnect');\n}\nexport function useCoinbaseWalletConnector() {\n    /*\n    options: {\n      headlessMode: true,\n    }\n    */\n    return useConnector('coinbaseWalletSDK');\n}\nexport function useMetaMaskConnector() {\n    /*\n    options: {\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      UNSTABLE_shimOnConnectSelectAccount: true,\n    }\n    */\n    return useConnector('metaMask');\n}\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/useConnectors.d.ts","writeByteOrderMark":false,"text":"import { type Connector } from 'wagmi';\nexport declare function useConnectors(): import(\"@wagmi/core\").GetConnectorsReturnType;\nexport declare function useConnector(id: string, uuid?: string): Connector;\nexport declare function useInjectedConnector(uuid?: string): Connector;\nexport declare function useWalletConnectConnector(): Connector;\nexport declare function useCoinbaseWalletConnector(): Connector;\nexport declare function useMetaMaskConnector(): Connector;\n"}}

{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport { useAccount } from 'wagmi';\nimport { routes, useContext } from '../ConnectKit';\nimport Modal from '../Common/Modal';\nimport Onboarding from '../Pages/Onboarding';\nimport About from '../Pages/About';\nimport Connectors from '../Pages/Connectors';\nimport MobileConnectors from '../Pages/MobileConnectors';\nimport ConnectUsing from './ConnectUsing';\nimport DownloadApp from '../Pages/DownloadApp';\nimport Profile from '../Pages/Profile';\nimport SwitchNetworks from '../Pages/SwitchNetworks';\nimport SignInWithEthereum from '../Pages/SignInWithEthereum';\nimport { getAppName } from '../../defaultConfig';\nimport { ConnectKitThemeProvider } from '../ConnectKitThemeProvider/ConnectKitThemeProvider';\nimport { useChainIsSupported } from '../../hooks/useChainIsSupported';\nconst customThemeDefault = {};\nconst ConnectModal = ({ mode = 'auto', theme = 'auto', customTheme = customThemeDefault, lang = 'en-US', }) => {\n    var _a;\n    const context = useContext();\n    const { isConnected, chain } = useAccount();\n    const chainIsSupported = useChainIsSupported(chain === null || chain === void 0 ? void 0 : chain.id);\n    //if chain is unsupported we enforce a \"switch chain\" prompt\n    const closeable = !(((_a = context.options) === null || _a === void 0 ? void 0 : _a.enforceSupportedChains) &&\n        isConnected &&\n        !chainIsSupported);\n    const showBackButton = closeable &&\n        context.route !== routes.CONNECTORS &&\n        context.route !== routes.PROFILE;\n    const showInfoButton = closeable && context.route !== routes.PROFILE;\n    const onBack = () => {\n        if (context.route === routes.SIGNINWITHETHEREUM) {\n            context.setRoute(routes.PROFILE);\n        }\n        else if (context.route === routes.SWITCHNETWORKS) {\n            context.setRoute(routes.PROFILE);\n        }\n        else if (context.route === routes.DOWNLOAD) {\n            context.setRoute(routes.CONNECT);\n        }\n        else {\n            context.setRoute(routes.CONNECTORS);\n        }\n    };\n    const pages = {\n        onboarding: _jsx(Onboarding, {}),\n        about: _jsx(About, {}),\n        download: _jsx(DownloadApp, {}),\n        connectors: _jsx(Connectors, {}),\n        mobileConnectors: _jsx(MobileConnectors, {}),\n        connect: _jsx(ConnectUsing, {}),\n        profile: _jsx(Profile, {}),\n        switchNetworks: _jsx(SwitchNetworks, {}),\n        signInWithEthereum: _jsx(SignInWithEthereum, {}),\n    };\n    function hide() {\n        context.setOpen(false);\n    }\n    useEffect(() => {\n        var _a;\n        if (isConnected) {\n            if (context.route !== routes.PROFILE ||\n                context.route !== routes.SIGNINWITHETHEREUM) {\n                if (context.signInWithEthereum &&\n                    !((_a = context.options) === null || _a === void 0 ? void 0 : _a.disableSiweRedirect)) {\n                    context.setRoute(routes.SIGNINWITHETHEREUM);\n                }\n                else {\n                    hide(); // Hide on connect\n                }\n            }\n        }\n        else {\n            hide(); // Hide on connect\n        }\n    }, [isConnected]);\n    useEffect(() => context.setMode(mode), [mode]);\n    useEffect(() => context.setTheme(theme), [theme]);\n    useEffect(() => context.setCustomTheme(customTheme), [customTheme]);\n    useEffect(() => context.setLang(lang), [lang]);\n    /* When pulling data into WalletConnect, it prioritises the og:title tag over the title tag */\n    useEffect(() => {\n        const appName = getAppName();\n        if (!appName || !context.open)\n            return;\n        const title = document.createElement('meta');\n        title.setAttribute('property', 'og:title');\n        title.setAttribute('content', appName);\n        document.head.prepend(title);\n        /*\n        // TODO:  When pulling data into WalletConnect, figure out which icon gets used and replace with appIcon if available\n        const appIcon = getAppIcon();\n        const icon = document.createElement('link');\n        if (appIcon) {\n          icon.setAttribute('rel', 'icon');\n          icon.setAttribute('href', appIcon);\n          document.head.prepend(icon);\n        }*/\n        return () => {\n            document.head.removeChild(title);\n            //if (appIcon) document.head.removeChild(icon);\n        };\n    }, [context.open]);\n    return (_jsx(ConnectKitThemeProvider, { theme: theme, customTheme: customTheme, mode: mode, children: _jsx(Modal, { open: context.open, pages: pages, pageId: context.route, onClose: closeable ? hide : undefined, onInfo: showInfoButton ? () => context.setRoute(routes.ABOUT) : undefined, onBack: showBackButton ? onBack : undefined }) }));\n};\nexport default ConnectModal;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/types.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/Onboarding/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/About/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/Connectors/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/MobileConnectors/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectModal/ConnectUsing.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/DownloadApp/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/Profile/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/SwitchNetworks/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/SignInWithEthereum/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/defaultConfig.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKitThemeProvider/ConnectKitThemeProvider.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useChainIsSupported.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/ConnectModal/index.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\nimport { CustomTheme, Languages, Mode, Theme } from '../../types';\ndeclare const ConnectModal: React.FC<{\n    mode?: Mode;\n    theme?: Theme;\n    customTheme?: CustomTheme;\n    lang?: Languages;\n}>;\nexport default ConnectModal;\n"}}

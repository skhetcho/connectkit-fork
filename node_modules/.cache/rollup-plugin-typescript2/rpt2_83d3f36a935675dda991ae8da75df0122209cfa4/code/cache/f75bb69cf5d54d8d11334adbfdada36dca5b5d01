{"code":"import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { useContext } from '../../ConnectKit';\nimport useMeasure from 'react-use-measure';\nimport { TooltipWindow, TooltipContainer, TooltipTail } from './styles';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { ResetContainer } from '../../../styles';\nimport Portal from '../Portal';\nimport { useThemeContext } from '../../ConnectKitThemeProvider/ConnectKitThemeProvider';\nconst Tooltip = ({ children, message, open, xOffset = 0, yOffset = 0, delay, }) => {\n    var _a;\n    const context = useContext();\n    const themeContext = useThemeContext();\n    if ((_a = context.options) === null || _a === void 0 ? void 0 : _a.hideTooltips)\n        return _jsx(_Fragment, { children: children });\n    const [isOpen, setIsOpen] = useState(false);\n    const [outOfBounds, setOutOfBounds] = useState(false);\n    const [size, setSize] = useState('small');\n    const [ready, setReady] = useState(false);\n    const [currentRoute] = useState(context.route);\n    const targetRef = useRef(null);\n    const [ref, bounds] = useMeasure({\n        debounce: !ready ? 220 : 0, // fix alignment initial state\n        offsetSize: true,\n        scroll: true,\n    });\n    const checkBounds = () => {\n        let flag = false;\n        const x = xOffset + bounds.left + bounds.width;\n        const y = yOffset + bounds.top + bounds.height * 0.5;\n        if (x > window.innerWidth || x < 0 || y > window.innerHeight || y < 0) {\n            flag = true;\n        }\n        return flag;\n    };\n    const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n    const refreshLayout = () => {\n        if (!targetRef.current ||\n            bounds.top +\n                bounds.bottom +\n                bounds.left +\n                bounds.right +\n                bounds.height +\n                bounds.width ===\n                0)\n            return;\n        const x = xOffset + bounds.left + bounds.width;\n        const y = yOffset + bounds.top + bounds.height * 0.5;\n        if (!ready && x !== 0 && y !== 0)\n            setReady(true);\n        targetRef.current.style.left = `${x}px`;\n        targetRef.current.style.top = `${y}px`;\n        setSize(targetRef.current.offsetHeight <= 40 ? 'small' : 'large');\n        setOutOfBounds(checkBounds());\n    };\n    useIsomorphicLayoutEffect(refreshLayout, [bounds, open, isOpen]);\n    useEffect(() => {\n        if (!context.open)\n            setIsOpen(false);\n    }, [context.open]);\n    useEffect(() => {\n        setIsOpen(!!open);\n    }, [open]);\n    return (_jsxs(_Fragment, { children: [_jsx(motion.div, { ref: ref, style: open === undefined\n                    ? {\n                        cursor: 'help',\n                    }\n                    : {}, onHoverStart: () => setIsOpen(true), onHoverEnd: () => setIsOpen(false), onClick: () => setIsOpen(false), children: children }), _jsx(Portal, { children: _jsx(AnimatePresence, { children: currentRoute === context.route && !outOfBounds && isOpen && (_jsx(ResetContainer, { \"$useTheme\": themeContext.theme, \"$useMode\": themeContext.mode, \"$customTheme\": themeContext.customTheme, children: _jsx(TooltipWindow, { children: _jsxs(TooltipContainer, { role: \"tooltip\", \"$size\": size, ref: targetRef, initial: 'collapsed', animate: ready ? 'open' : {}, exit: 'collapsed', variants: {\n                                    collapsed: {\n                                        transformOrigin: '20px 50%',\n                                        opacity: 0,\n                                        scale: 0.9,\n                                        z: 0.01,\n                                        y: '-50%',\n                                        x: 20,\n                                        transition: {\n                                            duration: 0.1,\n                                        },\n                                    },\n                                    open: {\n                                        willChange: 'opacity,transform',\n                                        opacity: 1,\n                                        scale: 1,\n                                        z: 0.01,\n                                        y: '-50%',\n                                        x: 20,\n                                        transition: {\n                                            ease: [0.76, 0, 0.24, 1],\n                                            duration: 0.15,\n                                            delay: delay ? delay : 0.5,\n                                        },\n                                    },\n                                }, children: [message, _jsx(TooltipTail, { \"$size\": size })] }) }) })) }) })] }));\n};\nexport default Tooltip;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/react-use-measure/types/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Tooltip/types.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Tooltip/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/framer-motion/dist/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/styles/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Portal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKitThemeProvider/ConnectKitThemeProvider.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Common/Tooltip/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { TooltipProps } from './types';\ndeclare const Tooltip: React.FC<TooltipProps>;\nexport default Tooltip;\n"}}

{"code":"import { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { useEffect, useState } from 'react';\nimport { useContext } from '../ConnectKit';\nimport { useWallet } from '../../wallets/useWallets';\nimport ConnectWithInjector from './ConnectWithInjector';\nimport ConnectWithQRCode from './ConnectWithQRCode';\nimport { contentVariants } from '../Common/Modal';\nimport Alert from '../Common/Alert';\nconst states = {\n    QRCODE: 'qrcode',\n    INJECTOR: 'injector',\n};\nconst ConnectUsing = () => {\n    const context = useContext();\n    const wallet = useWallet(context.connector.id);\n    // If cannot be scanned, display injector flow, which if extension is not installed will show CTA to install it\n    const isQrCode = !(wallet === null || wallet === void 0 ? void 0 : wallet.isInstalled) && (wallet === null || wallet === void 0 ? void 0 : wallet.getWalletConnectDeeplink);\n    const [status, setStatus] = useState(isQrCode ? states.QRCODE : states.INJECTOR);\n    useEffect(() => {\n        // if no provider, change to qrcode\n        const checkProvider = async () => {\n            const res = await (wallet === null || wallet === void 0 ? void 0 : wallet.connector.getProvider());\n            if (!res) {\n                setStatus(states.QRCODE);\n                setTimeout(context.triggerResize, 10); // delay required here for modal to resize\n            }\n        };\n        if (status === states.INJECTOR)\n            checkProvider();\n    }, []);\n    if (!wallet)\n        return _jsxs(Alert, { children: [\"Connector not found \", context.connector.id] });\n    return (_jsxs(AnimatePresence, { children: [status === states.QRCODE && (_jsx(motion.div, { initial: 'initial', animate: 'animate', exit: 'exit', variants: contentVariants, children: _jsx(ConnectWithQRCode, { switchConnectMethod: (id) => {\n                        //if (id) setId(id);\n                        setStatus(states.INJECTOR);\n                    } }) }, states.QRCODE)), status === states.INJECTOR && (_jsx(motion.div, { initial: 'initial', animate: 'animate', exit: 'exit', variants: contentVariants, children: _jsx(ConnectWithInjector, { switchConnectMethod: (id) => {\n                        //if (id) setId(id);\n                        setStatus(states.QRCODE);\n                    } }) }, states.INJECTOR))] }));\n};\nexport default ConnectUsing;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/framer-motion/dist/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/wallets/useWallets.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectModal/ConnectWithInjector/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectModal/ConnectWithQRCode.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Alert/index.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/ConnectModal/ConnectUsing.d.ts","writeByteOrderMark":false,"text":"declare const ConnectUsing: () => import(\"react/jsx-runtime\").JSX.Element;\nexport default ConnectUsing;\n"}}

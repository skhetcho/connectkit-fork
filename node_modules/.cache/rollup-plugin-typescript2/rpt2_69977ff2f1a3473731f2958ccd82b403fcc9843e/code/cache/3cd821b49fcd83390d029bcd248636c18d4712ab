{"code":"import { useState, useEffect } from 'react';\nimport { useAccount } from 'wagmi';\nimport { useContext } from '../../components/ConnectKit';\nimport { useConnect } from '../useConnect';\nimport { useWalletConnectConnector } from './../useConnectors';\nexport function useWalletConnectUri({ enabled } = {\n    enabled: true,\n}) {\n    const { log } = useContext();\n    const [uri, setUri] = useState(undefined);\n    const connector = useWalletConnectConnector();\n    const { isConnected } = useAccount();\n    const { connectAsync } = useConnect();\n    useEffect(() => {\n        if (!enabled)\n            return;\n        async function handleMessage(message) {\n            const { type, data } = message;\n            log('WC Message', type, data);\n            if (type === 'display_uri') {\n                setUri(data);\n            }\n            /*\n              // This has the URI as well, but we're probably better off using the one in the display_uri event\n              if (type === 'connecting') {\n                const p = await connector.getProvider();\n                const uri = p.signer.uri;\n                setConnectorUri(uri);\n              }\n              */\n        }\n        async function handleDisconnect() {\n            log('WC Disconnect');\n            if (connector)\n                connectWallet(connector);\n        }\n        async function connectWallet(connector) {\n            const result = await connectAsync({ connector });\n            if (result)\n                return result;\n            return false;\n        }\n        async function connectWalletConnect(connector) {\n            try {\n                await connectWallet(connector);\n            }\n            catch (error) {\n                log('catch error');\n                log(error);\n                if (error.code) {\n                    switch (error.code) {\n                        case 4001:\n                            log('error.code - User rejected');\n                            connectWalletConnect(connector); // Regenerate QR code\n                            break;\n                        default:\n                            log('error.code - Unknown Error');\n                            break;\n                    }\n                }\n                else {\n                    // Sometimes the error doesn't respond with a code\n                    log('WalletConnect cannot connect.', error);\n                }\n            }\n        }\n        if (isConnected) {\n            setUri(undefined);\n        }\n        else {\n            if (!connector || uri)\n                return;\n            if (connector && !isConnected) {\n                connectWalletConnect(connector);\n                log('add wc listeners');\n                connector.emitter.on('message', handleMessage);\n                connector.emitter.on('disconnect', handleDisconnect);\n                return () => {\n                    log('remove wc listeners');\n                    connector.emitter.off('message', handleMessage);\n                    connector.emitter.off('disconnect', handleDisconnect);\n                };\n            }\n        }\n    }, [enabled, connector, isConnected]);\n    return {\n        uri,\n    };\n}\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useConnect.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useConnectors.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/connectors/useWalletConnectUri.d.ts","writeByteOrderMark":false,"text":"type Props = {\n    enabled?: boolean;\n};\nexport declare function useWalletConnectUri({ enabled }?: Props): {\n    uri: string | undefined;\n};\nexport {};\n"}}

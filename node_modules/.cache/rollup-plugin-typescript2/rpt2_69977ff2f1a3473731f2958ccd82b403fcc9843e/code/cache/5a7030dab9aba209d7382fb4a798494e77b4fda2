{"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { ImageContainer, ImageContainerInner, MobileImageContainer, Slider, Slides, Slide, Dots, Dot, } from './styles';\nimport { PageContent, ModalBody, ModalContent, ModalH1, } from '../../Common/Modal/styles';\nimport Button from '../../Common/Button';\nimport { SlideOne, SlideThree, SlideTwo } from './graphics';\nimport { AnimatePresence, MotionConfig } from 'framer-motion';\nimport { OrDivider } from '../../Common/Modal';\nimport useLocales from '../../../hooks/useLocales';\nimport FitText from '../../Common/FitText';\nimport { useContext } from '../../ConnectKit';\nconst About = () => {\n    var _a, _b;\n    const locales = useLocales({\n    //CONNECTORNAME: connector.name,\n    });\n    const context = useContext();\n    const ctaUrl = (_b = (_a = context.options) === null || _a === void 0 ? void 0 : _a.ethereumOnboardingUrl) !== null && _b !== void 0 ? _b : locales.aboutScreen_ctaUrl;\n    const [ready, setReady] = useState(true);\n    const [slider, setSlider] = useState(0);\n    const interacted = useRef(false);\n    const scrollPos = useRef(0);\n    const animationEase = [0.16, 1, 0.3, 1];\n    const animationDuration = 600;\n    const autoplayDelay = 5100;\n    let interval;\n    useEffect(() => {\n        //interval = setTimeout(nextSlide, autoplayDelay);\n        return () => clearInterval(interval);\n    }, []);\n    const isSwipe = () => {\n        if (sliderRef.current) {\n            const { overflow } = getComputedStyle(sliderRef.current);\n            return overflow !== 'visible';\n        }\n        return false;\n    };\n    const gotoSlide = (index) => {\n        setReady(false);\n        if (isSwipe()) {\n            scrollToSlide(index);\n        }\n        else {\n            setSlider(index);\n        }\n    };\n    const nextSlide = () => {\n        if (interacted.current)\n            return;\n        setSlider((prevSlider) => {\n            const index = (prevSlider + 1) % slides.length;\n            scrollToSlide(index);\n            return index;\n        });\n        interval = setTimeout(nextSlide, autoplayDelay);\n    };\n    const scrollToSlide = (index) => {\n        if (sliderRef.current) {\n            const { offsetWidth: width } = sliderRef.current;\n            sliderRef.current.scrollLeft = width * index;\n            setTimeout(() => setSlider(index), 100);\n        }\n    };\n    // This event should not fire on mobile\n    const onScroll = () => {\n        if (!sliderRef.current)\n            return;\n        const { offsetWidth: width, scrollLeft: x } = sliderRef.current;\n        const prevScroll = scrollPos.current;\n        scrollPos.current = x;\n        // Limit when the slider should be set after swipe\n        const threshold = 4;\n        if (prevScroll - x > -threshold && prevScroll - x < threshold) {\n            const currentSlide = Math.round(x / width);\n            setSlider(currentSlide);\n        }\n    };\n    const onTouchMove = () => {\n        didInteract();\n    };\n    const onTouchEnd = () => {\n        const { offsetWidth: width, scrollLeft: x } = sliderRef.current;\n        const currentSlide = Math.round(x / width);\n        setSlider(currentSlide);\n    };\n    const didInteract = () => {\n        interacted.current = true;\n        clearTimeout(interval);\n    };\n    const sliderRef = useRef(null);\n    useEffect(() => {\n        if (!sliderRef.current)\n            return;\n        sliderRef.current.addEventListener('scroll', onScroll);\n        sliderRef.current.addEventListener('touchmove', onTouchMove);\n        sliderRef.current.addEventListener('touchend', onTouchEnd);\n        return () => {\n            if (!sliderRef.current)\n                return;\n            sliderRef.current.removeEventListener('scroll', onScroll);\n            sliderRef.current.removeEventListener('touchmove', onTouchMove);\n            sliderRef.current.removeEventListener('touchend', onTouchEnd);\n        };\n    }, [sliderRef]);\n    const graphics = [\n        _jsx(SlideOne, { layoutId: 'graphicCircle', duration: animationDuration, ease: animationEase }),\n        _jsx(SlideTwo, { layoutId: 'graphicCircle', duration: animationDuration, ease: animationEase }),\n        _jsx(SlideThree, { layoutId: 'graphicCircle', duration: animationDuration, ease: animationEase }),\n    ];\n    const mobileGraphics = [\n        _jsx(SlideOne, { duration: animationDuration, ease: animationEase }),\n        _jsx(SlideTwo, { duration: animationDuration, ease: animationEase }),\n        _jsx(SlideThree, { duration: animationDuration, ease: animationEase }),\n    ];\n    // Adjust height of ModalBody to fit content based on language\n    const slideHeight = (() => {\n        var _a;\n        switch ((_a = context.options) === null || _a === void 0 ? void 0 : _a.language) {\n            case 'en-US':\n            case 'zh-CN':\n                return 64;\n            default:\n                return 84;\n        }\n    })();\n    const slides = [\n        _jsxs(_Fragment, { children: [_jsx(ModalH1, { style: { height: 24 }, \"$small\": true, children: _jsx(FitText, { children: locales.aboutScreen_a_h1 }) }), _jsx(ModalBody, { style: { height: slideHeight }, children: _jsx(FitText, { children: locales.aboutScreen_a_p }) })] }),\n        _jsxs(_Fragment, { children: [_jsx(ModalH1, { style: { height: 24 }, \"$small\": true, children: _jsx(FitText, { children: locales.aboutScreen_b_h1 }) }), _jsx(ModalBody, { style: { height: slideHeight }, children: _jsx(FitText, { children: locales.aboutScreen_b_p }) })] }),\n        _jsxs(_Fragment, { children: [_jsx(ModalH1, { style: { height: 24 }, \"$small\": true, children: _jsx(FitText, { children: locales.aboutScreen_c_h1 }) }), _jsx(ModalBody, { style: { height: slideHeight }, children: _jsx(FitText, { children: locales.aboutScreen_c_p }) })] }),\n    ];\n    return (_jsxs(PageContent, { children: [_jsxs(Slider, { children: [_jsx(ImageContainer, { children: _jsx(MotionConfig, { transition: {\n                                duration: animationDuration / 1000,\n                                ease: animationEase,\n                            }, children: _jsx(AnimatePresence, { initial: false, onExitComplete: () => setReady(true), children: graphics.map((g, i) => slider === i && (_jsx(ImageContainerInner, { style: { position: 'absolute' }, children: g }, i))) }) }) }), _jsx(Slides, { ref: sliderRef, children: _jsx(AnimatePresence, { children: slides.map((s, i) => (_jsxs(Slide, { \"$active\": slider === i, children: [_jsx(MobileImageContainer, { children: _jsx(MotionConfig, { transition: {\n                                                duration: 0,\n                                            }, children: _jsx(ImageContainerInner, { children: mobileGraphics[i] }) }) }), _jsx(ModalContent, { style: { gap: 8, paddingBottom: 0 }, children: s })] }, i))) }) })] }), _jsx(OrDivider, { children: _jsx(Dots, { children: slides.map((s, i) => (_jsx(Dot, { \"$active\": slider === i, onClick: () => {\n                            didInteract();\n                            gotoSlide(i);\n                        } }, i))) }) }), _jsx(Button, { href: ctaUrl, arrow: true, children: locales.aboutScreen_ctaText })] }));\n};\nexport default About;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/About/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Button/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Pages/About/graphics.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/framer-motion/dist/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLocales.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/FitText/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Pages/About/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\ndeclare const About: React.FC;\nexport default About;\n"}}

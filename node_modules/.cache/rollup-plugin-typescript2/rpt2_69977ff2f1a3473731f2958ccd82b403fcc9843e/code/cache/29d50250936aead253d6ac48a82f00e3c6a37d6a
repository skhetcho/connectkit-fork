{"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useLayoutEffect, useRef, useState, } from 'react';\nimport { useContext } from './../../ConnectKit';\nimport useMeasure from 'react-use-measure';\nimport ChainSelectList from './../ChainSelectList';\nimport Portal from './../Portal';\nimport { ResetContainer } from './../../../styles';\nimport { DropdownWindow, DropdownOverlay, DropdownContainer, DropdownHeading, } from './styles';\nimport { AnimatePresence } from 'framer-motion';\nimport { useThemeContext } from './../../ConnectKitThemeProvider/ConnectKitThemeProvider';\nimport FocusTrap from './../../../hooks/useFocusTrap';\nimport useLockBodyScroll from './../../../hooks/useLockBodyScroll';\nimport useLocales from '../../../hooks/useLocales';\nconst ChainSelectDropdown = ({ children, open, onClose, offsetX = 0, offsetY = 8 }) => {\n    var _a, _b, _c;\n    const context = useContext();\n    const themeContext = useThemeContext();\n    const locales = useLocales();\n    const [offset, setOffset] = useState({ x: 0, y: 0 });\n    useLockBodyScroll(open);\n    const contentRef = useRef(null);\n    useEffect(() => {\n        const listener = (e) => {\n            var _a, _b, _c;\n            if (!open)\n                return;\n            if (e.key === 'Escape')\n                onClose();\n            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n                if (!contentRef.current)\n                    return;\n                e.preventDefault();\n                const focusableEls = (_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll(`\r\n            a[href]:not(:disabled),\r\n            button:not(:disabled),\r\n            textarea:not(:disabled),\r\n            input[type=\"text\"]:not(:disabled),\r\n            input[type=\"radio\"]:not(:disabled),\r\n            input[type=\"checkbox\"]:not(:disabled),\r\n            select:not(:disabled)\r\n          `), firstFocusableEl = focusableEls[0], lastFocusableEl = focusableEls[focusableEls.length - 1];\n                if (e.key === 'ArrowUp') {\n                    if (document.activeElement === firstFocusableEl) {\n                        lastFocusableEl.focus();\n                    }\n                    else {\n                        let focusItem = (_b = document === null || document === void 0 ? void 0 : document.activeElement) === null || _b === void 0 ? void 0 : _b.previousSibling;\n                        if (!focusItem)\n                            focusItem = lastFocusableEl;\n                        while (focusItem.disabled)\n                            focusItem = focusItem.previousSibling;\n                        focusItem.focus();\n                    }\n                }\n                else {\n                    if (document.activeElement === lastFocusableEl) {\n                        firstFocusableEl.focus();\n                    }\n                    else {\n                        let focusItem = (_c = document === null || document === void 0 ? void 0 : document.activeElement) === null || _c === void 0 ? void 0 : _c.nextSibling;\n                        if (!focusItem)\n                            focusItem = firstFocusableEl;\n                        while (focusItem.disabled)\n                            focusItem = focusItem.nextSibling;\n                        focusItem.focus();\n                    }\n                }\n            }\n        };\n        document.addEventListener('keydown', listener);\n        return () => {\n            document.removeEventListener('keydown', listener);\n        };\n    }, [open]);\n    const targetRef = useRef(null);\n    const innerRef = useCallback((node) => {\n        if (!node)\n            return;\n        targetRef.current = node;\n        refresh();\n    }, [open]);\n    const [ref, bounds] = useMeasure({\n        debounce: 120, // waits until modal transition has finished before measuring\n        offsetSize: true,\n        scroll: true,\n    });\n    const refresh = () => {\n        if (!targetRef.current ||\n            bounds.top +\n                bounds.bottom +\n                bounds.left +\n                bounds.right +\n                bounds.height +\n                bounds.width ===\n                0) {\n            return;\n        }\n        let x = bounds.left + offsetX;\n        let y = bounds.top + bounds.height + offsetY;\n        targetRef.current.style.left = `${x}px`;\n        targetRef.current.style.top = `${y}px`;\n        /*\n        const contentRect = targetRef.current.getBoundingClientRect();\n    \n        const w = contentRect.width;\n        const h = contentRect.height;\n    \n        if (x + w > window.innerWidth) {\n          x = bounds.left + bounds.width - contentRect.width - offsetX;\n        }\n        if (y + h > window.innerHeight - 24) {\n          y = bounds.top - contentRect.height - offsetY;\n        }\n    \n        setOffset({\n          x: x,\n          y: y,\n        });\n        */\n    };\n    const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n    useIsomorphicLayoutEffect(refresh, [targetRef.current, bounds, open]);\n    useEffect(refresh, [open, targetRef.current]);\n    const onScroll = onClose;\n    const onResize = onClose;\n    useEffect(() => {\n        refresh();\n        window.addEventListener('scroll', onScroll);\n        window.addEventListener('resize', onResize);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n        };\n    }, []);\n    return (_jsxs(_Fragment, { children: [_jsx(\"div\", { ref: ref, children: children }), _jsx(AnimatePresence, { children: open && (_jsx(Portal, { children: _jsx(ResetContainer, { \"$useTheme\": (_a = themeContext.theme) !== null && _a !== void 0 ? _a : context.theme, \"$useMode\": (_b = themeContext.mode) !== null && _b !== void 0 ? _b : context.mode, \"$customTheme\": (_c = themeContext.customTheme) !== null && _c !== void 0 ? _c : context.customTheme, children: _jsx(FocusTrap, { children: _jsxs(DropdownWindow, { ref: contentRef, children: [_jsx(DropdownOverlay, { onClick: onClose }), _jsxs(DropdownContainer, { ref: innerRef, style: {\n                                            left: offset.x,\n                                            top: offset.y,\n                                        }, initial: 'collapsed', animate: 'open', exit: 'collapsed', variants: {\n                                            collapsed: {\n                                                transformOrigin: '0 0',\n                                                opacity: 0,\n                                                scale: 0.96,\n                                                z: 0.01,\n                                                y: -4,\n                                                x: 0,\n                                                transition: {\n                                                    duration: 0.1,\n                                                },\n                                            },\n                                            open: {\n                                                transformOrigin: '0 0',\n                                                willChange: 'opacity,transform',\n                                                opacity: 1,\n                                                scale: 1,\n                                                z: 0.01,\n                                                y: 0,\n                                                x: 0,\n                                                transition: {\n                                                    ease: [0.76, 0, 0.24, 1],\n                                                    duration: 0.15,\n                                                },\n                                            },\n                                        }, children: [_jsx(DropdownHeading, { children: locales.switchNetworks }), _jsx(ChainSelectList, {})] })] }) }) }) })) })] }));\n};\nexport default ChainSelectDropdown;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/react-use-measure/types/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/ChainSelectList/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Portal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/styles/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/ChainSelectDropdown/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/framer-motion/dist/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKitThemeProvider/ConnectKitThemeProvider.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useFocusTrap.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLockBodyScroll.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLocales.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/Common/ChainSelectDropdown/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\ndeclare const ChainSelectDropdown: React.FC<{\n    children?: React.ReactNode;\n    open: boolean;\n    onClose: () => void;\n    offsetX?: number;\n    offsetY?: number;\n}>;\nexport default ChainSelectDropdown;\n"}}

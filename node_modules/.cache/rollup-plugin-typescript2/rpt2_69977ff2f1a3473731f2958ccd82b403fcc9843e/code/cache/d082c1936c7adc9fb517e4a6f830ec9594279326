{"code":"import { Fragment as _Fragment, jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { routes, useContext } from '../ConnectKit';\nimport { useWalletConnectModal } from '../../hooks/useWalletConnectModal';\nimport { detectBrowser, isWalletConnectConnector, } from '../../utils';\nimport { PageContent, ModalContent } from '../Common/Modal/styles';\nimport { OrDivider } from '../Common/Modal';\nimport CustomQRCode from '../Common/CustomQRCode';\nimport Button from '../Common/Button';\nimport ScanIconWithLogos from '../../assets/ScanIconWithLogos';\nimport { ExternalLinkIcon } from '../../assets/icons';\nimport CopyToClipboard from '../Common/CopyToClipboard';\nimport useLocales from '../../hooks/useLocales';\nimport { useWallet } from '../../wallets/useWallets';\nimport { useWeb3 } from '../contexts/web3';\nconst ConnectWithQRCode = ({ switchConnectMethod }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const context = useContext();\n    const id = context.connector.id;\n    const wallet = useWallet(context.connector.id);\n    const { open: openW3M, isOpen: isOpenW3M } = useWalletConnectModal();\n    const { connect: { getUri }, } = useWeb3();\n    const wcUri = getUri(id);\n    const uri = wcUri\n        ? (_b = (_a = wallet === null || wallet === void 0 ? void 0 : wallet.getWalletConnectDeeplink) === null || _a === void 0 ? void 0 : _a.call(wallet, wcUri)) !== null && _b !== void 0 ? _b : wcUri\n        : undefined;\n    const locales = useLocales({\n        CONNECTORNAME: wallet === null || wallet === void 0 ? void 0 : wallet.name,\n    });\n    if (!wallet)\n        return _jsxs(_Fragment, { children: [\"Wallet not found \", context.connector.id] });\n    const downloads = wallet === null || wallet === void 0 ? void 0 : wallet.downloadUrls;\n    const extensions = {\n        chrome: downloads === null || downloads === void 0 ? void 0 : downloads.chrome,\n        firefox: downloads === null || downloads === void 0 ? void 0 : downloads.firefox,\n        brave: downloads === null || downloads === void 0 ? void 0 : downloads.brave,\n        edge: downloads === null || downloads === void 0 ? void 0 : downloads.edge,\n        safari: downloads === null || downloads === void 0 ? void 0 : downloads.safari,\n    };\n    const browser = detectBrowser();\n    const hasApps = downloads && Object.keys(downloads).length !== 0;\n    const suggestedExtension = extensions\n        ? {\n            name: Object.keys(extensions)[0],\n            label: ((_c = Object.keys(extensions)[0]) === null || _c === void 0 ? void 0 : _c.charAt(0).toUpperCase()) +\n                ((_d = Object.keys(extensions)[0]) === null || _d === void 0 ? void 0 : _d.slice(1)), // Capitalise first letter, but this might be better suited as a lookup table\n            url: extensions[Object.keys(extensions)[0]],\n        }\n        : undefined;\n    const showAdditionalOptions = isWalletConnectConnector(id);\n    return (_jsxs(PageContent, { children: [_jsxs(ModalContent, { style: { paddingBottom: 8, gap: 14 }, children: [_jsx(CustomQRCode, { value: uri, image: wallet === null || wallet === void 0 ? void 0 : wallet.icon, tooltipMessage: isWalletConnectConnector(id) ? (_jsxs(_Fragment, { children: [_jsx(ScanIconWithLogos, {}), _jsx(\"span\", { children: locales.scanScreen_tooltip_walletConnect })] })) : (_jsxs(_Fragment, { children: [_jsx(ScanIconWithLogos, { logo: wallet === null || wallet === void 0 ? void 0 : wallet.icon }), _jsx(\"span\", { children: locales.scanScreen_tooltip_default })] })) }), showAdditionalOptions ? (_jsx(OrDivider, {})) : (hasApps && _jsx(OrDivider, { children: locales.dontHaveTheApp }))] }), showAdditionalOptions && ( // for walletConnect\n            _jsxs(\"div\", { style: {\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    gap: 14,\n                }, children: [((_e = context.options) === null || _e === void 0 ? void 0 : _e.walletConnectCTA) !== 'modal' && (_jsx(CopyToClipboard, { variant: \"button\", string: uri, children: ((_f = context.options) === null || _f === void 0 ? void 0 : _f.walletConnectCTA) === 'link'\n                            ? locales.copyToClipboard\n                            : locales.copyCode })), ((_g = context.options) === null || _g === void 0 ? void 0 : _g.walletConnectCTA) !== 'link' && (_jsx(Button, { icon: _jsx(ExternalLinkIcon, {}), onClick: openW3M, disabled: isOpenW3M, waiting: isOpenW3M, children: ((_h = context.options) === null || _h === void 0 ? void 0 : _h.walletConnectCTA) === 'modal'\n                            ? locales.useWalletConnectModal\n                            : locales.useModal }))] })), hasApps && (_jsx(_Fragment, { children: _jsx(Button, { onClick: () => {\n                        context.setRoute(routes.DOWNLOAD);\n                    }, \n                    /*\n                    icon={\n                      <div style={{ background: connectorInfo?.icon }}>\n                        {connectorInfo?.logos.default}\n                      </div>\n                    }\n                    roundedIcon\n                    */\n                    download: true, children: locales.getWalletName }) }))] }));\n};\nexport default ConnectWithQRCode;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useWalletConnectModal.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/utils/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Modal/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/CustomQRCode/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Button/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/assets/ScanIconWithLogos.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/assets/icons.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/CopyToClipboard/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLocales.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/wallets/useWallets.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/contexts/web3/index.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/ConnectModal/ConnectWithQRCode.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\ndeclare const ConnectWithQRCode: React.FC<{\n    switchConnectMethod: (id?: string) => void;\n}>;\nexport default ConnectWithQRCode;\n"}}

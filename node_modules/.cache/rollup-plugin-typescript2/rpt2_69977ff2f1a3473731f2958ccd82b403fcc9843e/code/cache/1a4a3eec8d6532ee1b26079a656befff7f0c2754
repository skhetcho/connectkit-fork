{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useMemo } from 'react';\nimport Logos from '../assets/logos';\nimport { useContext } from '../components/ConnectKit';\nimport { getLocale } from './../localizations';\nexport default function useLocales(replacements) {\n    var _a, _b;\n    const context = useContext();\n    const language = (_b = (_a = context.options) === null || _a === void 0 ? void 0 : _a.language) !== null && _b !== void 0 ? _b : 'en-US';\n    const translations = useMemo(() => {\n        return getLocale(language);\n    }, [language]);\n    if (!translations) {\n        console.error(`Missing translations for: ${language}`);\n        return `Missing translations for: ${language}`;\n    }\n    const translated = {};\n    Object.keys(translations).map((key) => {\n        const string = translations[key];\n        return (translated[key] = localize(string, replacements));\n    });\n    return translated;\n}\nconst localize = (text, replacements) => {\n    let parsedText = text;\n    if (replacements) {\n        Object.keys(replacements).forEach((key) => {\n            // use `replace` instead of `replaceAll` to support Node 14\n            parsedText = parsedText.replace(new RegExp(`({{ ${key} }})`, 'g'), replacements[key]);\n        });\n    }\n    return replaceMarkdown(parsedText);\n};\nconst replaceMarkdown = (markdownText) => {\n    let text = markdownText;\n    text = text.split('\\n');\n    text = text.map((t, i) => {\n        return (_jsxs(React.Fragment, { children: [wrapTags(t), i < text.length - 1 && _jsx(\"br\", {})] }, i));\n    });\n    return text;\n};\nconst wrapTags = (text) => {\n    // Bold markdown handling\n    const textArray = text.split(/(\\*\\*[^\\*]*\\*\\*)/g);\n    let result = textArray.map((str, i) => {\n        if (/(\\*\\*.*\\*\\*)/g.test(str)) {\n            // use `replace` instead of `replaceAll` to support Node 14\n            return _jsx(\"strong\", { children: str.replace(/\\*\\*/g, '') }, i);\n        }\n        return `${str}`;\n    });\n    // Replace text with logo\n    return result.map((r) => {\n        if (typeof r === 'string') {\n            return r.split(/(\\[WALLETCONNECTLOGO\\])/g).map((s) => {\n                if (s === '[WALLETCONNECTLOGO]') {\n                    return (_jsx(\"span\", { className: \"ck-tt-logo\", children: _jsx(Logos.WalletConnect, {}) }, s));\n                }\n                return s;\n            });\n        }\n        return r;\n    });\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/assets/logos.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/localizations/index.tsx"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/useLocales.d.ts","writeByteOrderMark":false,"text":"export default function useLocales(replacements?: any): any;\n"}}

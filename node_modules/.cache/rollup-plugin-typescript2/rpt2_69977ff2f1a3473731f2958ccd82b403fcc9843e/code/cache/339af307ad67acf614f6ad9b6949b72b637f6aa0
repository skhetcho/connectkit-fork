{"code":"import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useAccount, useEnsName } from 'wagmi';\nimport { truncateENSAddress, truncateEthAddress } from './../../utils';\nimport useIsMounted from '../../hooks/useIsMounted';\nimport { IconContainer, TextContainer, UnsupportedNetworkContainer, } from './styles';\nimport { routes, useContext } from '../ConnectKit';\nimport { useModal } from '../../hooks/useModal';\nimport Avatar from '../Common/Avatar';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { Balance } from '../BalanceButton';\nimport ThemedButton, { ThemeContainer } from '../Common/ThemedButton';\nimport { ResetContainer } from '../../styles';\nimport { AuthIcon } from '../../assets/icons';\nimport { useSIWE } from '../../siwe';\nimport useLocales from '../../hooks/useLocales';\nimport { useChainIsSupported } from '../../hooks/useChainIsSupported';\nimport { useEnsFallbackConfig } from '../../hooks/useEnsFallbackConfig';\nconst contentVariants = {\n    initial: {\n        zIndex: 2,\n        opacity: 0,\n        x: '-100%',\n    },\n    animate: {\n        opacity: 1,\n        x: 0.1,\n        transition: {\n            duration: 0.4,\n            ease: [0.25, 1, 0.5, 1],\n        },\n    },\n    exit: {\n        zIndex: 1,\n        opacity: 0,\n        x: '-100%',\n        pointerEvents: 'none',\n        position: 'absolute',\n        transition: {\n            duration: 0.4,\n            ease: [0.25, 1, 0.5, 1],\n        },\n    },\n};\nconst addressVariants = {\n    initial: {\n        zIndex: 2,\n        opacity: 0,\n        x: '100%',\n    },\n    animate: {\n        x: 0.2,\n        opacity: 1,\n        transition: {\n            duration: 0.4,\n            ease: [0.25, 1, 0.5, 1],\n        },\n    },\n    exit: {\n        zIndex: 1,\n        x: '100%',\n        opacity: 0,\n        pointerEvents: 'none',\n        position: 'absolute',\n        transition: {\n            duration: 0.4,\n            ease: [0.25, 1, 0.5, 1],\n        },\n    },\n};\nconst textVariants = {\n    initial: {\n        opacity: 0,\n    },\n    animate: {\n        opacity: 1,\n        transition: {\n            duration: 0.3,\n            ease: [0.25, 1, 0.5, 1],\n        },\n    },\n    exit: {\n        position: 'absolute',\n        opacity: 0,\n        transition: {\n            duration: 0.3,\n            ease: [0.25, 1, 0.5, 1],\n        },\n    },\n};\nconst ConnectButtonRenderer = ({ children, }) => {\n    const isMounted = useIsMounted();\n    const context = useContext();\n    const { open, setOpen } = useModal();\n    const { address, isConnected, chain } = useAccount();\n    const isChainSupported = useChainIsSupported(chain === null || chain === void 0 ? void 0 : chain.id);\n    const ensFallbackConfig = useEnsFallbackConfig();\n    const { data: ensName } = useEnsName({\n        chainId: 1,\n        address: address,\n        config: ensFallbackConfig,\n    });\n    function hide() {\n        setOpen(false);\n    }\n    function show() {\n        setOpen(true);\n        context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);\n    }\n    if (!children)\n        return null;\n    if (!isMounted)\n        return null;\n    return (_jsx(_Fragment, { children: children({\n            show,\n            hide,\n            chain: chain,\n            unsupported: !isChainSupported,\n            isConnected: !!address,\n            isConnecting: open, // Using `open` to determine if connecting as wagmi isConnecting only is set to true when an active connector is awaiting connection\n            address: address,\n            truncatedAddress: address ? truncateEthAddress(address) : undefined,\n            ensName: ensName === null || ensName === void 0 ? void 0 : ensName.toString(),\n        }) }));\n};\nConnectButtonRenderer.displayName = 'ConnectKitButton.Custom';\nfunction ConnectKitButtonInner({ label, showAvatar, separator, }) {\n    var _a;\n    const locales = useLocales({});\n    const context = useContext();\n    const { isSignedIn } = useSIWE();\n    const { address, chain } = useAccount();\n    const isChainSupported = useChainIsSupported(chain === null || chain === void 0 ? void 0 : chain.id);\n    const ensFallbackConfig = useEnsFallbackConfig();\n    const { data: ensName } = useEnsName({\n        chainId: 1,\n        address: address,\n        config: ensFallbackConfig,\n    });\n    const defaultLabel = locales.connectWallet;\n    return (_jsx(AnimatePresence, { initial: false, children: address ? (_jsxs(TextContainer, { initial: 'initial', animate: 'animate', exit: 'exit', variants: addressVariants, style: {\n                height: 40,\n                //padding: !showAvatar ? '0 5px' : undefined,\n            }, children: [showAvatar && (_jsxs(IconContainer, { children: [_jsxs(AnimatePresence, { initial: false, children: [isSignedIn && (_jsx(motion.div, { style: {\n                                        zIndex: 2,\n                                        position: 'absolute',\n                                        bottom: 0,\n                                        right: 0,\n                                    }, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, children: _jsx(AuthIcon, {}) })), !isChainSupported && (_jsx(UnsupportedNetworkContainer, { initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, children: _jsx(\"svg\", { width: \"14\", height: \"14\", viewBox: \"0 0 14 14\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", children: _jsx(\"path\", { d: \"M1.68831 13.5H12.0764C13.1026 13.5 13.7647 12.7197 13.7647 11.763C13.7647 11.4781 13.6985 11.1863 13.5462 10.9149L8.34225 1.37526C8.02445 0.791754 7.45505 0.5 6.88566 0.5C6.31627 0.5 5.73364 0.791754 5.42246 1.37526L0.225108 10.9217C0.0728291 11.1863 0 11.4781 0 11.763C0 12.7197 0.662083 13.5 1.68831 13.5ZM6.88566 8.8048C6.49503 8.8048 6.27655 8.5809 6.26331 8.1738L6.16399 5.0595C6.15075 4.64562 6.44869 4.34708 6.87904 4.34708C7.30278 4.34708 7.61396 4.6524 7.60071 5.06628L7.5014 8.16701C7.48154 8.5809 7.26305 8.8048 6.88566 8.8048ZM6.88566 11.3492C6.44207 11.3492 6.07792 11.0303 6.07792 10.5757C6.07792 10.1211 6.44207 9.80219 6.88566 9.80219C7.32926 9.80219 7.69341 10.1143 7.69341 10.5757C7.69341 11.0371 7.32264 11.3492 6.88566 11.3492Z\", fill: \"currentColor\" }) }) }))] }), _jsx(Avatar, { size: 24, address: address })] })), _jsx(\"div\", { style: {\n                        position: 'relative',\n                        paddingRight: showAvatar ? 1 : 0,\n                    }, children: _jsx(AnimatePresence, { initial: false, children: ensName ? (_jsx(TextContainer, { initial: 'initial', animate: 'animate', exit: 'exit', variants: textVariants, style: {\n                                position: ensName ? 'relative' : 'absolute',\n                            }, children: ((_a = context.options) === null || _a === void 0 ? void 0 : _a.truncateLongENSAddress)\n                                ? truncateENSAddress(ensName, 20)\n                                : ensName }, \"ckEnsName\")) : (_jsxs(TextContainer, { initial: 'initial', animate: 'animate', exit: 'exit', variants: textVariants, style: {\n                                position: ensName ? 'absolute' : 'relative',\n                            }, children: [truncateEthAddress(address, separator), ' '] }, \"ckTruncatedAddress\")) }) })] }, \"connectedText\")) : (_jsx(TextContainer, { initial: 'initial', animate: 'animate', exit: 'exit', variants: contentVariants, style: {\n                height: 40,\n                //padding: '0 5px',\n            }, children: label ? label : defaultLabel }, \"connectWalletText\")) }));\n}\nexport function ConnectKitButton({ \n// Options\nlabel, showBalance = false, showAvatar = true, \n// Theming\ntheme, mode, customTheme, \n// Events\nonClick, }) {\n    var _a;\n    const isMounted = useIsMounted();\n    const context = useContext();\n    const { isConnected, address, chain } = useAccount();\n    const chainIsSupported = useChainIsSupported(chain === null || chain === void 0 ? void 0 : chain.id);\n    function show() {\n        context.setOpen(true);\n        context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);\n    }\n    const separator = ['web95', 'rounded', 'minimal'].includes((_a = theme !== null && theme !== void 0 ? theme : context.theme) !== null && _a !== void 0 ? _a : '')\n        ? '....'\n        : undefined;\n    if (!isMounted)\n        return null;\n    const shouldShowBalance = showBalance && chainIsSupported;\n    const willShowBalance = address && shouldShowBalance;\n    return (_jsx(ResetContainer, { \"$useTheme\": theme !== null && theme !== void 0 ? theme : context.theme, \"$useMode\": mode !== null && mode !== void 0 ? mode : context.mode, \"$customTheme\": customTheme !== null && customTheme !== void 0 ? customTheme : context.customTheme, children: _jsxs(ThemeContainer, { onClick: () => {\n                if (onClick) {\n                    onClick(show);\n                }\n                else {\n                    show();\n                }\n            }, children: [shouldShowBalance && (_jsx(AnimatePresence, { initial: false, children: willShowBalance && (_jsx(motion.div, { initial: {\n                            opacity: 0,\n                            x: '100%',\n                            width: 0,\n                            marginRight: 0,\n                        }, animate: {\n                            opacity: 1,\n                            x: 0,\n                            width: 'auto',\n                            marginRight: -24,\n                            transition: {\n                                duration: 0.4,\n                                ease: [0.25, 1, 0.5, 1],\n                            },\n                        }, exit: {\n                            opacity: 0,\n                            x: '100%',\n                            width: 0,\n                            marginRight: 0,\n                            transition: {\n                                duration: 0.4,\n                                ease: [0.25, 1, 0.5, 1],\n                            },\n                        }, children: _jsx(ThemedButton, { variant: 'secondary', theme: theme !== null && theme !== void 0 ? theme : context.theme, mode: mode !== null && mode !== void 0 ? mode : context.mode, customTheme: customTheme !== null && customTheme !== void 0 ? customTheme : context.customTheme, style: { overflow: 'hidden' }, children: _jsx(motion.div, { style: { paddingRight: 24 }, children: _jsx(Balance, { hideSymbol: true }) }) }) }, 'balance')) })), _jsx(ThemedButton, { theme: theme !== null && theme !== void 0 ? theme : context.theme, mode: mode !== null && mode !== void 0 ? mode : context.mode, customTheme: customTheme !== null && customTheme !== void 0 ? customTheme : context.customTheme, style: shouldShowBalance &&\n                        showBalance &&\n                        address &&\n                        (theme === 'retro' || context.theme === 'retro')\n                        ? {\n                            /** Special fix for the retro theme... not happy about this one */\n                            boxShadow: 'var(--ck-connectbutton-balance-connectbutton-box-shadow)',\n                            borderRadius: 'var(--ck-connectbutton-balance-connectbutton-border-radius)',\n                            overflow: 'hidden',\n                        }\n                        : {\n                            overflow: 'hidden',\n                        }, children: _jsx(ConnectKitButtonInner, { separator: separator, showAvatar: showAvatar, label: label }) })] }) }));\n}\nConnectKitButton.Custom = ConnectButtonRenderer;\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/@types/react/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/utils/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useIsMounted.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectButton/styles.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useModal.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/Avatar/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/framer-motion/dist/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/types.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/BalanceButton/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/Common/ThemedButton/index.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/styles/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/assets/icons.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/siwe/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLocales.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/viem/_types/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useChainIsSupported.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useEnsFallbackConfig.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/components/ConnectButton/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { CustomTheme, Mode, Theme } from '../../types';\nimport { Chain } from 'viem';\ntype Hash = `0x${string}`;\ntype ConnectButtonRendererProps = {\n    children?: (renderProps: {\n        show?: () => void;\n        hide?: () => void;\n        chain?: Chain & {\n            unsupported?: boolean;\n        };\n        unsupported: boolean;\n        isConnected: boolean;\n        isConnecting: boolean;\n        address?: Hash;\n        truncatedAddress?: string;\n        ensName?: string;\n    }) => React.ReactNode;\n};\ntype ConnectKitButtonProps = {\n    label?: string;\n    showBalance?: boolean;\n    showAvatar?: boolean;\n    theme?: Theme;\n    mode?: Mode;\n    customTheme?: CustomTheme;\n    onClick?: (open: () => void) => void;\n};\nexport declare function ConnectKitButton({ label, showBalance, showAvatar, theme, mode, customTheme, onClick, }: ConnectKitButtonProps): import(\"react/jsx-runtime\").JSX.Element | null;\nexport declare namespace ConnectKitButton {\n    var Custom: React.FC<ConnectButtonRendererProps>;\n}\nexport {};\n"}}

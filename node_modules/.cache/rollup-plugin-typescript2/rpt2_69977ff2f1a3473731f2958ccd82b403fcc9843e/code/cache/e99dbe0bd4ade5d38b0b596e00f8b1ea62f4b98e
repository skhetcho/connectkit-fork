{"code":"/**\n * This is a wrapper around wagmi's useConnect hook that adds some\n * additional functionality.\n */\nimport { useConnect as wagmiUseConnect, } from 'wagmi';\nimport { useContext } from '../components/ConnectKit';\nexport function useConnect({ ...props } = {}) {\n    const context = useContext();\n    const { connect, connectAsync, connectors, ...rest } = wagmiUseConnect({\n        ...props,\n        mutation: {\n            ...props.mutation,\n            onError(err) {\n                if (err.message) {\n                    if (err.message !== 'User rejected request') {\n                        context.log(err.message, err);\n                    }\n                }\n                else {\n                    context.log(`Could not connect.`, err);\n                }\n            },\n        },\n    });\n    return {\n        connect: ({ connector, chainId, mutation, }) => {\n            var _a;\n            return connect({\n                connector,\n                chainId: chainId !== null && chainId !== void 0 ? chainId : (_a = context.options) === null || _a === void 0 ? void 0 : _a.initialChainId,\n            }, mutation);\n        },\n        connectAsync: async ({ connector, chainId, mutation, }) => {\n            var _a;\n            return connectAsync({\n                connector,\n                chainId: chainId !== null && chainId !== void 0 ? chainId : (_a = context.options) === null || _a === void 0 ? void 0 : _a.initialChainId,\n            }, mutation);\n        },\n        connectors,\n        ...rest,\n    };\n}\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useLastConnector.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/useConnect.d.ts","writeByteOrderMark":false,"text":"/**\n * This is a wrapper around wagmi's useConnect hook that adds some\n * additional functionality.\n */\nimport { type UseConnectParameters, CreateConnectorFn, Connector } from 'wagmi';\nexport declare function useConnect({ ...props }?: UseConnectParameters): {\n    variables: undefined;\n    data: undefined;\n    error: null;\n    isError: false;\n    isIdle: true;\n    isPending: false;\n    isSuccess: false;\n    status: \"idle\";\n    reset: () => void;\n    context: unknown;\n    failureCount: number;\n    failureReason: import(\"@wagmi/core\").ConnectErrorType | null;\n    isPaused: boolean;\n    submittedAt: number;\n    connect: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => void;\n    connectAsync: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => Promise<import(\"wagmi/query\").ConnectData<import(\"wagmi\").Config>>;\n    connectors: readonly Connector[];\n} | {\n    variables: {\n        chainId?: number | undefined;\n        connector: CreateConnectorFn | Connector;\n    };\n    data: undefined;\n    error: null;\n    isError: false;\n    isIdle: false;\n    isPending: true;\n    isSuccess: false;\n    status: \"pending\";\n    reset: () => void;\n    context: unknown;\n    failureCount: number;\n    failureReason: import(\"@wagmi/core\").ConnectErrorType | null;\n    isPaused: boolean;\n    submittedAt: number;\n    connect: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => void;\n    connectAsync: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => Promise<import(\"wagmi/query\").ConnectData<import(\"wagmi\").Config>>;\n    connectors: readonly Connector[];\n} | {\n    variables: {\n        chainId?: number | undefined;\n        connector: CreateConnectorFn | Connector;\n    };\n    data: undefined;\n    error: import(\"@wagmi/core\").ConnectErrorType;\n    isError: true;\n    isIdle: false;\n    isPending: false;\n    isSuccess: false;\n    status: \"error\";\n    reset: () => void;\n    context: unknown;\n    failureCount: number;\n    failureReason: import(\"@wagmi/core\").ConnectErrorType | null;\n    isPaused: boolean;\n    submittedAt: number;\n    connect: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => void;\n    connectAsync: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => Promise<import(\"wagmi/query\").ConnectData<import(\"wagmi\").Config>>;\n    connectors: readonly Connector[];\n} | {\n    variables: {\n        chainId?: number | undefined;\n        connector: CreateConnectorFn | Connector;\n    };\n    data: import(\"wagmi/query\").ConnectData<import(\"wagmi\").Config>;\n    error: null;\n    isError: false;\n    isIdle: false;\n    isPending: false;\n    isSuccess: true;\n    status: \"success\";\n    reset: () => void;\n    context: unknown;\n    failureCount: number;\n    failureReason: import(\"@wagmi/core\").ConnectErrorType | null;\n    isPaused: boolean;\n    submittedAt: number;\n    connect: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => void;\n    connectAsync: ({ connector, chainId, mutation, }: {\n        connector: CreateConnectorFn | Connector;\n        chainId?: number | undefined;\n        mutation?: UseConnectParameters['mutation'];\n    }) => Promise<import(\"wagmi/query\").ConnectData<import(\"wagmi\").Config>>;\n    connectors: readonly Connector[];\n};\n"}}

{"code":"import { useAccount } from 'wagmi';\nimport { routes, useContext } from '../components/ConnectKit';\nimport { useSIWE } from '../siwe';\nimport { useConnectCallback, } from './useConnectCallback';\nconst safeRoutes = {\n    disconnected: [\n        routes.CONNECTORS,\n        routes.ABOUT,\n        routes.ONBOARDING,\n        routes.MOBILECONNECTORS,\n        routes.ONBOARDING,\n    ],\n    connected: [routes.PROFILE, routes.SWITCHNETWORKS, routes.SIGNINWITHETHEREUM],\n};\nconst allRoutes = [\n    ...safeRoutes.connected,\n    ...safeRoutes.disconnected,\n];\nexport const useModal = ({ onConnect, onDisconnect } = {}) => {\n    const context = useContext();\n    useConnectCallback({\n        onConnect,\n        onDisconnect,\n    });\n    const { isConnected } = useAccount();\n    const { signIn } = useSIWE();\n    const close = () => {\n        context.setOpen(false);\n    };\n    const open = () => {\n        context.setOpen(true);\n    };\n    const gotoAndOpen = (route) => {\n        let validRoute = route;\n        if (!allRoutes.includes(route)) {\n            validRoute = isConnected ? routes.PROFILE : routes.CONNECTORS;\n            context.log(`Route ${route} is not a valid route, navigating to ${validRoute} instead.`);\n        }\n        else {\n            if (isConnected) {\n                if (!safeRoutes.connected.includes(route)) {\n                    validRoute = routes.PROFILE;\n                    context.log(`Route ${route} is not a valid route when connected, navigating to ${validRoute} instead.`);\n                }\n            }\n            else {\n                if (!safeRoutes.disconnected.includes(route)) {\n                    validRoute = routes.CONNECTORS;\n                    context.log(`Route ${route} is not a valid route when disconnected, navigating to ${validRoute} instead.`);\n                }\n            }\n        }\n        context.setRoute(validRoute);\n        open();\n    };\n    return {\n        open: context.open,\n        setOpen: (show) => {\n            if (show) {\n                gotoAndOpen(isConnected ? routes.PROFILE : routes.CONNECTORS);\n            }\n            else {\n                close();\n            }\n        },\n        // Disconnected Routes\n        openAbout: () => gotoAndOpen(routes.ABOUT),\n        openOnboarding: () => gotoAndOpen(routes.ONBOARDING),\n        // Connected Routes\n        openProfile: () => gotoAndOpen(routes.PROFILE),\n        openSwitchNetworks: () => gotoAndOpen(routes.SWITCHNETWORKS),\n        openSIWE: (triggerSIWE) => {\n            gotoAndOpen(routes.SIGNINWITHETHEREUM);\n            if (triggerSIWE)\n                signIn();\n        },\n    };\n};\n","references":["C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/node_modules/wagmi/dist/types/exports/index.d.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/components/ConnectKit.tsx","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/siwe/index.ts","C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/src/hooks/useConnectCallback.ts"],"dts":{"name":"C:/Users/Volcano/Desktop/avo/3rd-party-libraries/connectkit/packages/connectkit/build/hooks/useModal.d.ts","writeByteOrderMark":false,"text":"import { useConnectCallbackProps } from './useConnectCallback';\ntype UseModalProps = {} & useConnectCallbackProps;\nexport declare const useModal: ({ onConnect, onDisconnect }?: UseModalProps) => {\n    open: boolean;\n    setOpen: (show: boolean) => void;\n    openAbout: () => void;\n    openOnboarding: () => void;\n    openProfile: () => void;\n    openSwitchNetworks: () => void;\n    openSIWE: (triggerSIWE?: boolean) => void;\n};\nexport {};\n"}}
